{"version":3,"sources":["scraper.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["regex","spaces","getDecksFromUrl","wotcUrl","a","results","startsWith","options","uri","headers","transform","body","cheerio","rp","then","$","usernames","each","headerContent","this","find","text","username","split","duplicatePilot","includes","push","parts","name","chaff","replace","toLowerCase","url","deck","maindeck","sideboard","trim","count","parseInt","highlighted","pilot","archetype","catch","err","console","log","App","useState","hasScraped","setHasScraped","setWotcUrl","setResults","markup","setMarkup","displayedDeck","setDisplayedDeck","displayedDeckIndex","setDisplayedDeckIndex","modalOpen","setModalOpen","scrapeError","setScrapeError","useEffect","generateMarkupLine","result","muUrl","muPilot","highlights","filter","c","map","muHighlights","Array","from","Set","join","length","generateMarkup","mu","muString","generateCardCounts","cardCounts","forEach","r","card","countRow","decks","sort","b","scrape","scrapedResults","toggleCardHighlight","cards","List","Item","key","onClick","className","sideboardCards","setNextDeck","index","res","Container","Header","Grid","columns","Row","Column","width","textAlign","Input","value","onChange","e","target","placeholder","href","style","marginLeft","Button","content","Message","negative","Form","TextArea","height","Modal","open","centered","onClose","closeOnDimmerClick","closeIcon","Content","label","data","onKeyPress","Progress","total","progress","marginTop","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c1ce3832.chunk.js","sourcesContent":["import rp from \"request-promise\";\r\nimport * as cheerio from \"cheerio\";\r\nimport { Deck, Result } from './types'\r\n\r\nconst regex = /[^A-Za-z _-]/g;\r\nconst cardNameRegex = /[^A-Za-z /]/g;\r\nconst spaces = / /g;\r\n\r\nexport const getDecksFromUrl = async (wotcUrl: string): Promise<Result[]> => {\r\n    const results: Result[] = [];\r\n    if (wotcUrl.startsWith(\"https://magic.wizards.com\")) {\r\n        const options = {\r\n            uri: `https://cors-anywhere.herokuapp.com/${wotcUrl}`,\r\n            headers: { 'Origin': 'https://feremiyjeenyus.github.io/mtgo-results-scraper/' },\r\n            transform: function (body: string) {\r\n                return cheerio.load(body);\r\n            }\r\n        };\r\n        await rp(options)\r\n            .then($ => {\r\n                const usernames: string[] = [];\r\n                $(\".deck-group\").each(function (this: string) {\r\n                    const headerContent = $(this)\r\n                        .find(\"h4\")\r\n                        .text();\r\n                    const username = headerContent.split(\" (\")[0];\r\n                    const duplicatePilot = usernames.includes(username)\r\n                    usernames.push(username);\r\n                    const parts = headerContent.split(\" (\");\r\n                    const name = parts[0];\r\n                    let chaff = \"\";\r\n                    if (parts[1]) {\r\n                        chaff = parts[1]\r\n                            .replace(regex, \"\")\r\n                            .replace(spaces, \"_\")\r\n                            .toLowerCase();\r\n                    }\r\n                    const url = `${wotcUrl}#${name\r\n                        .replace(regex, \"\")\r\n                        .replace(spaces, \"_\")\r\n                        .toLowerCase()}${chaff ? \"_\" + chaff : \"\"}`;\r\n\r\n                    const deck: Deck = {\r\n                        maindeck: [],\r\n                        sideboard: []\r\n                    };\r\n                    $(this).find(\".sorted-by-overview-container\").find(\".row\").each(function (this: string) {\r\n                        deck.maindeck.push(\r\n                            {\r\n                                name: $(this).find(\".card-name\").text().trim(),\r\n                                count: parseInt($(this).find(\".card-count\").text(), 10),\r\n                                highlighted: false\r\n                            }\r\n                        )\r\n                    })\r\n\r\n                    $(this).find(\".sorted-by-sideboard-container\").find(\".row\").each(function (this: string) {\r\n                        deck.sideboard.push({\r\n                            name: $(this).find(\".card-name\").text().trim(),\r\n                            count: parseInt($(this).find(\".card-count\").text(), 10),\r\n                            highlighted: false\r\n                        })\r\n                    })\r\n\r\n                    results.push({\r\n                        pilot: username,\r\n                        url: url,\r\n                        deck: deck,\r\n                        duplicatePilot,\r\n                        archetype: \"\"\r\n                    });\r\n                });\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw (err)\r\n            });\r\n    }\r\n    return results\r\n};\r\n","import React, { useState, useEffect, ChangeEvent } from 'react';\nimport \"semantic-ui-css/semantic.min.css\"\nimport { Header, Container, Grid, Input, Button, TextArea, Form, Divider, List, Modal, GridColumn, Message, Progress } from 'semantic-ui-react'\nimport './App.css';\nimport { getDecksFromUrl } from './scraper'\nimport { Result, Card, Deck } from './types'\nimport DeckList from './DeckList'\n\nconst App: React.FC = () => {\n  const [hasScraped, setHasScraped] = useState<boolean>(false)\n  const [wotcUrl, setWotcUrl] = useState<string>(\"\");\n  const [results, setResults] = useState<Result[]>([]);\n  const [markup, setMarkup] = useState<string[]>([]);\n  const [displayedDeck, setDisplayedDeck] = useState<Result>();\n  const [displayedDeckIndex, setDisplayedDeckIndex] = useState<number>();\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const [scrapeError, setScrapeError] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (results && !hasScraped) {\n      setDisplayedDeck(results[0])\n      setDisplayedDeckIndex(0)\n    }\n  }, [results, hasScraped]);\n\n  const generateMarkupLine = (result: Result): string => {\n    const { deck, archetype, pilot, duplicatePilot, url } = result\n\n    const muUrl = `[${archetype || 'archetype'}](${url})`\n    const muPilot = `**${pilot.replace(/[_]/g, \"\\\\_\")}${\n      duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}**`\n\n    const highlights = [...deck.maindeck.filter(c => c.highlighted), ...deck.sideboard.filter(c => c.highlighted)].map(c => c.name)\n    const muHighlights = `(${Array.from(new Set(highlights)).join(\", \")})`\n    return `* ${muUrl}: ${muPilot} ${highlights.length ? muHighlights : \"\"}`\n  }\n\n  const generateMarkup = (results: Result[]) => {\n    const mu: string[] = [];\n    for (const result of results) {\n      const muString = generateMarkupLine(result)\n      mu.push(muString)\n    }\n    setMarkup(mu);\n  }\n\n  const generateCardCounts = (results: Result[]) => {\n    const cardCounts: { card: Card, decks: number }[] = []\n    results.forEach(r => {\n      r.deck.maindeck.forEach(card => {\n        const countRow = cardCounts.find(c => c.card.name === card.name);\n        if (!countRow) {\n          cardCounts.push({\n            card: { name: card.name, count: card.count, highlighted: false },\n            decks: 1\n          })\n        }\n        else {\n          countRow.card.count += card.count;\n          countRow.decks++;\n        }\n      })\n\n      r.deck.sideboard.forEach(card => {\n        const countRow = cardCounts.find(c => c.card.name === card.name);\n        if (!countRow) {\n          cardCounts.push({\n            card: { name: card.name, count: card.count, highlighted: false },\n            decks: 1\n          })\n        }\n        else {\n          countRow.card.count += card.count;\n          if (!r.deck.maindeck.find(c => c.name === card.name)) {\n            countRow.decks++;\n          }\n        }\n      })\n    })\n\n    cardCounts.sort((a, b) => b.card.count - a.card.count)\n    //TODO make this visible somewhere\n  }\n\n\n  const scrape = async () => {\n    try {\n      const scrapedResults = await getDecksFromUrl(wotcUrl);\n      generateMarkup(scrapedResults);\n      generateCardCounts(scrapedResults);\n      setResults(scrapedResults);\n      setHasScraped(true);\n    } catch (error) {\n      setScrapeError(true)\n    }\n  }\n\n  const toggleCardHighlight = (card: Card) => {\n    const { deck } = displayedDeck!\n    for (const c of deck.maindeck) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted\n      }\n    }\n    for (const c of deck.sideboard) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted\n      }\n    }\n    setDisplayedDeck({ ...displayedDeck!, deck })\n  }\n\n  const cards = displayedDeck && displayedDeck.deck.maindeck.map((card: Card) => {\n    return (\n      <List.Item key={card.name} onClick={() => toggleCardHighlight(card)} className={card.highlighted ? 'highlight' : ''}>\n        {card.count} {card.name}\n      </List.Item>\n    )\n  })\n\n  const sideboardCards = displayedDeck && displayedDeck.deck.sideboard.map((card: Card) => {\n    return (\n      <List.Item key={card.name} onClick={() => toggleCardHighlight(card)} className={card.highlighted ? 'highlight' : ''}>\n        {card.count} {card.name}\n      </List.Item>\n    )\n  })\n\n  const setNextDeck = () => {\n    if (!displayedDeck) {\n      return\n    }\n    const index = displayedDeckIndex!\n\n    const res = [...results]\n    res[index] = displayedDeck;\n    setResults(res);\n\n    const mu = markup\n    mu[index] = generateMarkupLine(displayedDeck)\n    setMarkup(mu)\n    if (index + 2 < results.length) {\n      console.log(results[index])\n      setDisplayedDeck(results[index + 1])\n      setDisplayedDeckIndex(index + 1);\n    }\n    else {\n      setModalOpen(false);\n    }\n  }\n\n  const setPreviousDeck = () => {\n    if (!displayedDeck) {\n      return\n    }\n    const index = displayedDeckIndex!\n\n    const res = [...results]\n    res[index] = displayedDeck;\n    setResults(res);\n\n    const mu = [...markup]\n    mu[index] = generateMarkupLine(displayedDeck)\n    setMarkup(mu)\n\n    if (index !== 0) {\n      console.log(results[index - 1])\n      setDisplayedDeck(results[index - 1])\n      setDisplayedDeckIndex(index - 1);\n    }\n    else {\n      setModalOpen(false);\n    }\n  }\n\n  const handleSetArchetype = (e: ChangeEvent, data: any) => {\n    const { value } = data\n    const deck: Result = { ...displayedDeck!, archetype: value as string }\n    console.log(deck)\n    setDisplayedDeck(deck)\n  }\n\n\n  const handleKeyPress = (e: any, data: any) => {\n    if (e.key === 'Enter') {\n      setNextDeck();\n    }\n  }\n\n  return (\n    <Container className=\"App\">\n      <Header>Scraper</Header>\n      <Grid columns={16}>\n        <Grid.Row>\n          <Grid.Column width={3} textAlign=\"left\">\n            <Input value={wotcUrl} onChange={(e) => setWotcUrl(e.target.value)} placeholder=\"Deck Dump URL\" />\n            <a\n              href='https://magic.wizards.com/en/content/deck-lists-magic-online-products-game-info'\n              target='_blank'\n              style={{ marginLeft: '1em' }}>\n              MTGO Results\n            </a>\n          </Grid.Column>\n          <Grid.Column width={2} textAlign=\"left\">\n            <Button onClick={scrape} content=\"Scrape\" />\n          </Grid.Column>\n          <Grid.Column width={2} textAlign=\"left\">\n            <Button onClick={() => (setModalOpen(true))} content=\"Start\" />\n          </Grid.Column>\n        </Grid.Row>\n\n        <Grid.Row>\n          <Grid.Column width={16}>\n            {scrapeError &&\n              <Message negative>\n                <p>There was an error while attempting to scrape results. Please try again later</p>\n              </Message>\n            }\n            <Form>\n              <Form.TextArea value={markup?.join(\"\\r\\n\")} style={{ height: 500 }} />\n            </Form>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n      <Modal\n        open={modalOpen && !!displayedDeck}\n        centered={false}\n        onClose={() => setModalOpen(false)}\n        closeOnDimmerClick={false}\n        closeIcon>\n        <Modal.Content>\n          {displayedDeck &&\n            <Grid width={16} >\n              <Grid.Row>\n                <Grid.Column width={12}>\n                  <Input label=\"Archetype\" value={displayedDeck.archetype} onChange={handleSetArchetype} onKeyPress={handleKeyPress} />\n                </Grid.Column>\n                <Grid.Column width={2}>\n                  <Button onClick={setPreviousDeck} content=\"Previous\" />\n                </Grid.Column>\n                <Grid.Column width={2}>\n                  <Button onClick={setNextDeck} content=\"Next\" />\n                </Grid.Column>\n              </Grid.Row>\n\n              <Grid.Row>\n                <Grid.Column width={4}>\n                  <List>\n                    {cards}\n                  </List>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                  <List>\n                    {sideboardCards}\n                  </List>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          }\n          <Progress value={displayedDeckIndex} total={results.length} progress='ratio' style={{ marginTop: '1em', marginBottom: 0 }} />\n        </Modal.Content>\n      </Modal>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}