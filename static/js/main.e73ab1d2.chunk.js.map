{"version":3,"sources":["scraper.ts","DeckList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["regex","spaces","getDecksFromUrl","wotcUrl","a","results","startsWith","options","uri","headers","transform","body","cheerio","rp","then","$","usernames","each","headerContent","this","find","text","username","split","duplicatePilot","includes","push","parts","name","chaff","replace","toLowerCase","url","deck","maindeck","sideboard","trim","count","parseInt","highlighted","pilot","archetype","catch","err","console","log","DeckList","props","result","goToNextDeck","goToPreviousDeck","setDisplayedDeck","toggleCardHighlight","card","c","cards","map","List","Item","key","onClick","className","sideboardCards","Grid","width","Row","Column","Input","label","value","onChange","e","data","onKeyPress","Button","content","App","useState","hasScraped","setHasScraped","setWotcUrl","setResults","markup","setMarkup","cardCounts","setCardCounts","displayedDeck","displayedDeckIndex","setDisplayedDeckIndex","modalOpen","setModalOpen","scrapeError","setScrapeError","useEffect","generateMarkupLine","muUrl","muPilot","highlights","filter","muHighlights","Array","from","Set","join","length","generateMarkup","mu","muString","generateCardCounts","counts","forEach","r","countRow","deckCount","sort","b","scrape","scrapedResults","panes","menuItem","pane","Tab","Pane","Form","TextArea","style","height","Container","Header","columns","textAlign","target","placeholder","href","marginLeft","Message","negative","renderActiveOnly","Modal","open","centered","onClose","closeOnDimmerClick","closeIcon","Content","index","res","Progress","total","progress","marginTop","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e73ab1d2.chunk.js","sourcesContent":["import rp from \"request-promise\";\r\nimport * as cheerio from \"cheerio\";\r\nimport { Deck, Result } from './types'\r\n\r\nconst regex = /[^A-Za-z _-]/g;\r\nconst spaces = / /g;\r\n\r\nexport const getDecksFromUrl = async (wotcUrl: string): Promise<Result[]> => {\r\n    const results: Result[] = [];\r\n    if (wotcUrl.startsWith(\"https://magic.wizards.com\")) {\r\n        const options = {\r\n            uri: `https://cors-anywhere.herokuapp.com/${wotcUrl}`,\r\n            headers: { 'Origin': 'https://feremiyjeenyus.github.io/mtgo-results-scraper/' },\r\n            transform: function (body: string) {\r\n                return cheerio.load(body);\r\n            }\r\n        };\r\n        await rp(options)\r\n            .then($ => {\r\n                const usernames: string[] = [];\r\n                $(\".deck-group\").each(function (this: string) {\r\n                    const headerContent = $(this)\r\n                        .find(\"h4\")\r\n                        .text();\r\n                    const username = headerContent.split(\" (\")[0];\r\n                    const duplicatePilot = usernames.includes(username)\r\n                    usernames.push(username);\r\n                    const parts = headerContent.split(\" (\");\r\n                    const name = parts[0];\r\n                    let chaff = \"\";\r\n                    if (parts[1]) {\r\n                        chaff = parts[1]\r\n                            .replace(regex, \"\")\r\n                            .replace(spaces, \"_\")\r\n                            .toLowerCase();\r\n                    }\r\n                    const url = `${wotcUrl}#${name\r\n                        .replace(regex, \"\")\r\n                        .replace(spaces, \"_\")\r\n                        .toLowerCase()}${chaff ? \"_\" + chaff : \"\"}`;\r\n\r\n                    const deck: Deck = {\r\n                        maindeck: [],\r\n                        sideboard: []\r\n                    };\r\n                    $(this).find(\".sorted-by-overview-container\").find(\".row\").each(function (this: string) {\r\n                        deck.maindeck.push(\r\n                            {\r\n                                name: $(this).find(\".card-name\").text().trim(),\r\n                                count: parseInt($(this).find(\".card-count\").text(), 10),\r\n                                highlighted: false\r\n                            }\r\n                        )\r\n                    })\r\n\r\n                    $(this).find(\".sorted-by-sideboard-container\").find(\".row\").each(function (this: string) {\r\n                        deck.sideboard.push({\r\n                            name: $(this).find(\".card-name\").text().trim(),\r\n                            count: parseInt($(this).find(\".card-count\").text(), 10),\r\n                            highlighted: false\r\n                        })\r\n                    })\r\n\r\n                    results.push({\r\n                        pilot: username,\r\n                        url: url,\r\n                        deck: deck,\r\n                        duplicatePilot,\r\n                        archetype: \"\"\r\n                    });\r\n                });\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw (err)\r\n            });\r\n    }\r\n    return results\r\n};\r\n","import React, { ChangeEvent } from 'react';\r\nimport \"semantic-ui-css/semantic.min.css\"\r\nimport { Grid, Input, Button, List } from 'semantic-ui-react'\r\nimport './App.css';\r\nimport { Result, Card } from './types'\r\n\r\ninterface DeckListProps {\r\n    result: Result;\r\n    goToNextDeck();\r\n    goToPreviousDeck();\r\n    setDisplayedDeck(Result: Result);\r\n}\r\n\r\nconst DeckList: React.FC<DeckListProps> = (props: DeckListProps) => {\r\n    const { result, goToNextDeck, goToPreviousDeck, setDisplayedDeck } = props\r\n\r\n    const toggleCardHighlight = (card: Card) => {\r\n        const { deck } = result\r\n        for (const c of deck.maindeck) {\r\n            if (c.name === card.name) {\r\n                c.highlighted = !c.highlighted\r\n            }\r\n        }\r\n        for (const c of deck.sideboard) {\r\n            if (c.name === card.name) {\r\n                c.highlighted = !c.highlighted\r\n            }\r\n        }\r\n        setDisplayedDeck({ ...result, deck })\r\n    }\r\n\r\n    const cards = result && result.deck.maindeck.map((card: Card) => {\r\n        return (\r\n            <List.Item key={card.name} onClick={() => toggleCardHighlight(card)} className={card.highlighted ? 'highlight' : ''}>\r\n                {card.count} {card.name}\r\n            </List.Item>\r\n        )\r\n    })\r\n\r\n    const sideboardCards = result && result.deck.sideboard.map((card: Card) => {\r\n        return (\r\n            <List.Item key={card.name} onClick={() => toggleCardHighlight(card)} className={card.highlighted ? 'highlight' : ''}>\r\n                {card.count} {card.name}\r\n            </List.Item>\r\n        )\r\n    })\r\n\r\n    const handleSetArchetype = (e: ChangeEvent, data: any) => {\r\n        const { value } = data\r\n        setDisplayedDeck({ ...result, archetype: value })\r\n    }\r\n\r\n    const handleKeyPress = (e: any, data: any) => {\r\n        if (e.key === 'Enter') {\r\n            goToNextDeck();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid width={16} >\r\n            <Grid.Row>\r\n                <Grid.Column width={12}>\r\n                    <Input label=\"Archetype\" value={result.archetype} onChange={handleSetArchetype} onKeyPress={handleKeyPress} />\r\n                </Grid.Column>\r\n                <Grid.Column width={2}>\r\n                    <Button onClick={goToPreviousDeck} content=\"Previous\" />\r\n                </Grid.Column>\r\n                <Grid.Column width={2}>\r\n                    <Button onClick={goToNextDeck} content=\"Next\" />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n\r\n            <Grid.Row>\r\n                <Grid.Column width={4}>\r\n                    <List>\r\n                        {cards}\r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <List>\r\n                        {sideboardCards}\r\n                    </List>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default DeckList;\r\n","import React, { useState, useEffect } from 'react';\r\nimport \"semantic-ui-css/semantic.min.css\"\r\nimport { Header, Container, Grid, Input, Button, Form, Modal, Message, Progress, Tab } from 'semantic-ui-react'\r\nimport './App.css';\r\nimport { getDecksFromUrl } from './scraper'\r\nimport { Result, Card } from './types'\r\nimport DeckList from './DeckList'\r\n\r\nconst App: React.FC = () => {\r\n  const [hasScraped, setHasScraped] = useState<boolean>(false)\r\n  const [wotcUrl, setWotcUrl] = useState<string>(\"\");\r\n  const [results, setResults] = useState<Result[]>([]);\r\n  const [markup, setMarkup] = useState<string[]>([]);\r\n  const [cardCounts, setCardCounts] = useState<string[]>([]);\r\n  const [displayedDeck, setDisplayedDeck] = useState<Result>();\r\n  const [displayedDeckIndex, setDisplayedDeckIndex] = useState<number>();\r\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\r\n  const [scrapeError, setScrapeError] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if (results && !hasScraped) {\r\n      setDisplayedDeck(results[0])\r\n      setDisplayedDeckIndex(0)\r\n    }\r\n  }, [results, hasScraped]);\r\n\r\n  const generateMarkupLine = (result: Result): string => {\r\n    const { deck, archetype, pilot, duplicatePilot, url } = result\r\n\r\n    const muUrl = `[${archetype || 'archetype'}](${url})`\r\n    const muPilot = `**${pilot.replace(/[_]/g, \"\\\\_\")}${\r\n      duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}**`\r\n\r\n    const highlights = [...deck.maindeck.filter(c => c.highlighted), ...deck.sideboard.filter(c => c.highlighted)].map(c => c.name)\r\n    const muHighlights = `(${Array.from(new Set(highlights)).join(\", \")})`\r\n    return `* ${muUrl}: ${muPilot} ${highlights.length ? muHighlights : \"\"}`\r\n  }\r\n\r\n  const generateMarkup = (results: Result[]) => {\r\n    const mu: string[] = [];\r\n    for (const result of results) {\r\n      const muString = generateMarkupLine(result)\r\n      mu.push(muString)\r\n    }\r\n    setMarkup(mu);\r\n  }\r\n\r\n  const generateCardCounts = (results: Result[]) => {\r\n    const counts: { card: Card, deckCount: number }[] = []\r\n    results.forEach(r => {\r\n      r.deck.maindeck.forEach(card => {\r\n        const countRow = counts.find(c => c.card.name === card.name);\r\n        if (!countRow) {\r\n          counts.push({\r\n            card: { name: card.name, count: card.count, highlighted: false },\r\n            deckCount: 1\r\n          })\r\n        }\r\n        else {\r\n          countRow.card.count += card.count;\r\n          countRow.deckCount++;\r\n        }\r\n      })\r\n\r\n      r.deck.sideboard.forEach(card => {\r\n        const countRow = counts.find(c => c.card.name === card.name);\r\n        if (!countRow) {\r\n          counts.push({\r\n            card: { name: card.name, count: card.count, highlighted: false },\r\n            deckCount: 1\r\n          })\r\n        }\r\n        else {\r\n          countRow.card.count += card.count;\r\n          if (!r.deck.maindeck.find(c => c.name === card.name)) {\r\n            countRow.deckCount++;\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    counts.sort((a, b) => b.card.count - a.card.count)\r\n    setCardCounts(counts.map(c => `${c.card.count} cop${c.card.count > 1 ? 'ies' : 'y'} of ${c.card.name} in ${c.deckCount} deck${c.deckCount > 1 ? 's' : ''}`))\r\n  }\r\n\r\n\r\n  const scrape = async () => {\r\n    try {\r\n      const scrapedResults = await getDecksFromUrl(wotcUrl);\r\n      generateMarkup(scrapedResults);\r\n      generateCardCounts(scrapedResults);\r\n      setResults(scrapedResults);\r\n      setHasScraped(true);\r\n    } catch (error) {\r\n      setScrapeError(true)\r\n    }\r\n  }\r\n\r\n  const goToNextDeck = () => {\r\n    if (!displayedDeck) {\r\n      return\r\n    }\r\n    const index = displayedDeckIndex!\r\n\r\n    const res = [...results]\r\n    res[index] = displayedDeck;\r\n    setResults(res);\r\n\r\n    const mu = markup\r\n    mu[index] = generateMarkupLine(displayedDeck)\r\n    setMarkup(mu)\r\n    if (index + 2 < results.length) {\r\n      console.log(results[index])\r\n      setDisplayedDeck(results[index + 1])\r\n      setDisplayedDeckIndex(index + 1);\r\n    }\r\n    else {\r\n      setModalOpen(false);\r\n    }\r\n  }\r\n\r\n  const goToPreviousDeck = () => {\r\n    if (!displayedDeck) {\r\n      return\r\n    }\r\n    const index = displayedDeckIndex!\r\n\r\n    const res = [...results]\r\n    res[index] = displayedDeck;\r\n    setResults(res);\r\n\r\n    const mu = [...markup]\r\n    mu[index] = generateMarkupLine(displayedDeck)\r\n    setMarkup(mu)\r\n\r\n    if (index !== 0) {\r\n      console.log(results[index - 1])\r\n      setDisplayedDeck(results[index - 1])\r\n      setDisplayedDeckIndex(index - 1);\r\n    }\r\n    else {\r\n      setModalOpen(false);\r\n    }\r\n  }\r\n\r\n  const panes = [\r\n    {\r\n      menuItem: 'Markdown', pane:\r\n        <Tab.Pane>\r\n          <Form>\r\n            <Form.TextArea value={markup?.join(\"\\r\\n\")} style={{ height: 500 }} />\r\n          </Form>\r\n        </Tab.Pane>\r\n    },\r\n    {\r\n      menuItem: 'Card Counts', pane:\r\n        <Tab.Pane>\r\n          <Form>\r\n            <Form.TextArea value={cardCounts?.join(\"\\r\\n\")} style={{ height: 500 }} />\r\n          </Form>\r\n        </Tab.Pane>\r\n    }\r\n  ]\r\n\r\n  return (\r\n    <Container className=\"App\">\r\n      <Header>Scraper</Header>\r\n      <Grid columns={16}>\r\n        <Grid.Row>\r\n          <Grid.Column width={3} textAlign=\"left\">\r\n            <Input value={wotcUrl} onChange={(e) => setWotcUrl(e.target.value)} placeholder=\"Deck Dump URL\" />\r\n            <a\r\n              href='https://magic.wizards.com/en/content/deck-lists-magic-online-products-game-info'\r\n              target='_blank'\r\n              style={{ marginLeft: '1em' }}>\r\n              MTGO Results\r\n            </a>\r\n          </Grid.Column>\r\n          <Grid.Column width={2} textAlign=\"left\">\r\n            <Button onClick={scrape} content=\"Scrape\" />\r\n          </Grid.Column>\r\n          <Grid.Column width={2} textAlign=\"left\">\r\n            <Button onClick={() => (setModalOpen(true))} content=\"Walkthrough\" />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n\r\n        <Grid.Row>\r\n          <Grid.Column width={16}>\r\n            {scrapeError &&\r\n              <Message negative>\r\n                <p>There was an error while attempting to scrape results. Please try again later</p>\r\n              </Message>\r\n            }\r\n            <Tab panes={panes} renderActiveOnly={false} />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n      <Modal\r\n        open={modalOpen && !!displayedDeck}\r\n        centered={false}\r\n        onClose={() => setModalOpen(false)}\r\n        closeOnDimmerClick={false}\r\n        closeIcon>\r\n        <Modal.Content>\r\n          {displayedDeck &&\r\n            <DeckList result={displayedDeck} goToNextDeck={goToNextDeck} goToPreviousDeck={goToPreviousDeck} setDisplayedDeck={setDisplayedDeck} />\r\n          }\r\n          <Progress value={displayedDeckIndex} total={results.length} progress='ratio' style={{ marginTop: '1em', marginBottom: 0 }} />\r\n        </Modal.Content>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}