{"ast":null,"code":"var _jsxFileName = \"C:\\\\Git\\\\guided-scraper\\\\src\\\\DeckList.tsx\";\nimport React from 'react';\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Grid, Input, Button, List } from 'semantic-ui-react';\nimport './App.css';\n\nconst DeckList = props => {\n  const {\n    result,\n    goToNextDeck,\n    goToPreviousDeck\n  } = props;\n\n  const toggleCardHighlight = card => {\n    const {\n      deck\n    } = result;\n\n    for (const c of deck.maindeck) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted;\n      }\n    }\n\n    for (const c of deck.sideboard) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted;\n      }\n    }\n\n    result.deck = deck;\n  };\n\n  const cards = result && result.deck.maindeck.map(card => {\n    return React.createElement(List.Item, {\n      key: card.name,\n      onClick: () => toggleCardHighlight(card),\n      className: card.highlighted ? 'highlight' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, card.count, \" \", card.name);\n  });\n  const sideboardCards = result && result.deck.sideboard.map(card => {\n    return React.createElement(List.Item, {\n      key: card.name,\n      onClick: () => toggleCardHighlight(card),\n      className: card.highlighted ? 'highlight' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, card.count, \" \", card.name);\n  });\n\n  const handleSetArchetype = (e, data) => {\n    const {\n      value\n    } = data;\n    result.archetype = value;\n  };\n\n  const handleKeyPress = (e, data) => {\n    if (e.key === 'Enter') {\n      goToNextDeck();\n    }\n  };\n\n  return React.createElement(Grid, {\n    width: 16,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Input, {\n    label: \"Archetype\",\n    value: result.archetype,\n    onChange: handleSetArchetype,\n    onKeyPress: handleKeyPress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })), React.createElement(Grid.Column, {\n    width: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: goToPreviousDeck,\n    content: \"Previous\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  })), React.createElement(Grid.Column, {\n    width: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: goToNextDeck,\n    content: \"Next\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }))), React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, cards)), React.createElement(Grid.Column, {\n    width: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, sideboardCards))));\n};\n\nexport default DeckList;","map":{"version":3,"sources":["C:/Git/guided-scraper/src/DeckList.tsx"],"names":["React","Grid","Input","Button","List","DeckList","props","result","goToNextDeck","goToPreviousDeck","toggleCardHighlight","card","deck","c","maindeck","name","highlighted","sideboard","cards","map","count","sideboardCards","handleSetArchetype","e","data","value","archetype","handleKeyPress","key"],"mappings":"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","sourcesContent":["import React, { useState, ChangeEvent } from 'react';\r\nimport \"semantic-ui-css/semantic.min.css\"\r\nimport { Header, Container, Grid, Input, Button, TextArea, Form, Divider, List } from 'semantic-ui-react'\r\nimport './App.css';\r\nimport { Result, Deck, Card } from './types'\r\n\r\ninterface DeckListProps {\r\n    result: Result;\r\n    goToNextDeck();\r\n    goToPreviousDeck();\r\n}\r\n\r\nconst DeckList: React.FC<DeckListProps> = (props: DeckListProps) => {\r\n    const { result, goToNextDeck, goToPreviousDeck } = props\r\n\r\n    const toggleCardHighlight = (card: Card) => {\r\n        const { deck } = result!\r\n        for (const c of deck.maindeck) {\r\n            if (c.name === card.name) {\r\n                c.highlighted = !c.highlighted\r\n            }\r\n        }\r\n        for (const c of deck.sideboard) {\r\n            if (c.name === card.name) {\r\n                c.highlighted = !c.highlighted\r\n            }\r\n        }\r\n        result.deck = deck\r\n    }\r\n\r\n    const cards = result && result.deck.maindeck.map((card: Card) => {\r\n        return (\r\n            <List.Item key={card.name} onClick={() => toggleCardHighlight(card)} className={card.highlighted ? 'highlight' : ''}>\r\n                {card.count} {card.name}\r\n            </List.Item>\r\n        )\r\n    })\r\n\r\n    const sideboardCards = result && result.deck.sideboard.map((card: Card) => {\r\n        return (\r\n            <List.Item key={card.name} onClick={() => toggleCardHighlight(card)} className={card.highlighted ? 'highlight' : ''}>\r\n                {card.count} {card.name}\r\n            </List.Item>\r\n        )\r\n    })\r\n\r\n    const handleSetArchetype = (e: ChangeEvent, data: any) => {\r\n        const { value } = data\r\n        result.archetype = value\r\n    }\r\n\r\n    const handleKeyPress = (e: any, data: any) => {\r\n        if (e.key === 'Enter') {\r\n            goToNextDeck();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid width={16} >\r\n            <Grid.Row>\r\n                <Grid.Column width={12}>\r\n                    <Input label=\"Archetype\" value={result.archetype} onChange={handleSetArchetype} onKeyPress={handleKeyPress} />\r\n                </Grid.Column>\r\n                <Grid.Column width={2}>\r\n                    <Button onClick={goToPreviousDeck} content=\"Previous\" />\r\n                </Grid.Column>\r\n                <Grid.Column width={2}>\r\n                    <Button onClick={goToNextDeck} content=\"Next\" />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n\r\n            <Grid.Row>\r\n                <Grid.Column width={4}>\r\n                    <List>\r\n                        {cards}\r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <List>\r\n                        {sideboardCards}\r\n                    </List>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default DeckList;\r\n"]},"metadata":{},"sourceType":"module"}