{"ast":null,"code":"var _jsxFileName = \"C:\\\\Git\\\\guided-scraper\\\\src\\\\App.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Header, Container, Grid, Input, Button, Form, List, Modal, Message } from 'semantic-ui-react';\nimport './App.css';\nimport { getDecksFromUrl } from './scraper';\n\nconst App = () => {\n  const [hasScraped, setHasScraped] = useState(false);\n  const [wotcUrl, setWotcUrl] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [markup, setMarkup] = useState([]);\n  const [displayedDeck, setDisplayedDeck] = useState();\n  const [displayedDeckIndex, setDisplayedDeckIndex] = useState();\n  const [modalOpen, setModalOpen] = useState(false);\n  const [scrapeError, setScrapeError] = useState(false);\n  useEffect(() => {\n    if (results && !hasScraped) {\n      setDisplayedDeck(results[0]);\n      setDisplayedDeckIndex(0);\n    }\n  }, [results, hasScraped]);\n\n  const generateMarkupLine = result => {\n    const {\n      deck,\n      archetype,\n      pilot,\n      duplicatePilot,\n      url\n    } = result;\n    const muUrl = `[${archetype || 'archetype'}](${url})`;\n    const muPilot = `**${pilot.replace(/[_]/g, \"\\\\_\")}${duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}**`;\n    const highlights = [...deck.maindeck.filter(c => c.highlighted), ...deck.sideboard.filter(c => c.highlighted)].map(c => c.name);\n    const muHighlights = `(${Array.from(new Set(highlights)).join(\", \")})`;\n    return `* ${muUrl}: ${muPilot} ${highlights.length ? muHighlights : \"\"}`;\n  };\n\n  useEffect(() => {\n    const mu = [];\n\n    for (const result of results) {\n      const muString = generateMarkupLine(result);\n      mu.push(muString);\n    }\n\n    setMarkup(mu);\n  }, [results]);\n\n  const generateCardCounts = results => {\n    const cardCounts = [];\n    results.forEach(r => {\n      r.deck.maindeck.forEach(card => {\n        const countRow = cardCounts.find(c => c.card.name === card.name);\n\n        if (!countRow) {\n          cardCounts.push({\n            card: {\n              name: card.name,\n              count: card.count,\n              highlighted: false\n            },\n            decks: 1\n          });\n        } else {\n          countRow.card.count += card.count;\n          countRow.decks++;\n        }\n      });\n      r.deck.sideboard.forEach(card => {\n        const countRow = cardCounts.find(c => c.card.name === card.name);\n\n        if (!countRow) {\n          cardCounts.push({\n            card: {\n              name: card.name,\n              count: card.count,\n              highlighted: false\n            },\n            decks: 1\n          });\n        } else {\n          countRow.card.count += card.count;\n\n          if (!r.deck.maindeck.find(c => c.name === card.name)) {\n            countRow.decks++;\n          }\n        }\n      });\n    });\n    cardCounts.sort((a, b) => b.card.count - a.card.count);\n    console.log(cardCounts);\n  };\n\n  const scrape = async () => {\n    try {\n      const scrapedResults = await getDecksFromUrl(wotcUrl);\n      generateCardCounts(scrapedResults);\n      setResults(scrapedResults);\n      setHasScraped(true);\n    } catch (error) {\n      setScrapeError(true);\n    }\n  };\n\n  const toggleCardHighlight = card => {\n    const {\n      deck\n    } = displayedDeck;\n    console.log(card);\n\n    for (const c of deck.maindeck) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted;\n      }\n    }\n\n    for (const c of deck.sideboard) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted;\n      }\n    }\n\n    setDisplayedDeck({ ...displayedDeck,\n      deck\n    });\n  };\n\n  const cards = displayedDeck && displayedDeck.deck.maindeck.map(card => {\n    return React.createElement(List.Item, {\n      key: card.name,\n      onClick: () => toggleCardHighlight(card),\n      className: card.highlighted ? 'highlight' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, card.count, \" \", card.name);\n  });\n  const sideboardCards = displayedDeck && displayedDeck.deck.sideboard.map(card => {\n    return React.createElement(List.Item, {\n      key: card.name,\n      onClick: () => toggleCardHighlight(card),\n      className: card.highlighted ? 'highlight' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, card.count, \" \", card.name);\n  });\n\n  const setNextDeck = () => {\n    if (!displayedDeck) {\n      return;\n    }\n\n    const index = displayedDeckIndex;\n    const mu = markup;\n    mu[index] = generateMarkupLine(displayedDeck);\n    setMarkup(mu);\n\n    if (index + 2 < results.length) {\n      setDisplayedDeck(results[index + 1]);\n      setDisplayedDeckIndex(index + 1);\n    } else {\n      setModalOpen(false);\n    }\n  };\n\n  const setPreviousDeck = () => {\n    if (!displayedDeck) {\n      return;\n    }\n\n    const index = displayedDeckIndex;\n    const mu = markup;\n    mu[index] = generateMarkupLine(displayedDeck);\n    setMarkup(mu);\n\n    if (index !== 0) {\n      console.log(results[index - 1]);\n      setDisplayedDeck(results[index - 1]);\n      setDisplayedDeckIndex(index - 1);\n    } else {\n      setModalOpen(false);\n    }\n  };\n\n  const handleSetArchetype = (e, data) => {\n    const {\n      value\n    } = data;\n    const deck = { ...displayedDeck,\n      archetype: value\n    };\n    setDisplayedDeck(deck);\n  };\n\n  const handleKeyPress = (e, data) => {\n    if (e.key === 'Enter') {\n      setNextDeck();\n    }\n  };\n\n  return React.createElement(Container, {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, \"Scraper\"), React.createElement(Grid, {\n    columns: 16,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 3,\n    textAlign: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(Input, {\n    value: wotcUrl,\n    onChange: e => setWotcUrl(e.target.value),\n    placeholder: \"Deck Dump URL\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }), React.createElement(\"a\", {\n    href: \"https://magic.wizards.com/en/content/deck-lists-magic-online-products-game-info\",\n    target: \"_blank\",\n    style: {\n      marginLeft: '1em'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"MTGO Results\")), React.createElement(Grid.Column, {\n    width: 2,\n    textAlign: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: scrape,\n    content: \"Scrape\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  })), React.createElement(Grid.Column, {\n    width: 2,\n    textAlign: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => setModalOpen(true),\n    content: \"Start\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }))), React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 16,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, scrapeError && React.createElement(Message, {\n    negative: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, \"There was an error while attempting to scrape results. Please try again later\")), React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(Form.TextArea, {\n    value: markup === null || markup === void 0 ? void 0 : markup.join(\"\\r\\n\"),\n    style: {\n      height: 500\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }))))), React.createElement(Modal, {\n    open: modalOpen && !!displayedDeck,\n    centered: false,\n    onClose: () => setModalOpen(false),\n    closeOnDimmerClick: false,\n    closeIcon: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, React.createElement(Modal.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, displayedDeck && React.createElement(Grid, {\n    width: 16,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, React.createElement(Input, {\n    label: \"Archetype\",\n    value: displayedDeck.archetype,\n    onChange: handleSetArchetype,\n    onKeyPress: handleKeyPress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  })), React.createElement(Grid.Column, {\n    width: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: setPreviousDeck,\n    content: \"Previous\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  })), React.createElement(Grid.Column, {\n    width: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: setNextDeck,\n    content: \"Next\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }))), React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, cards)), React.createElement(Grid.Column, {\n    width: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }, sideboardCards)))))));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Git/guided-scraper/src/App.tsx"],"names":["React","useState","useEffect","Header","Container","Grid","Input","Button","Form","List","Modal","Message","getDecksFromUrl","App","hasScraped","setHasScraped","wotcUrl","setWotcUrl","results","setResults","markup","setMarkup","displayedDeck","setDisplayedDeck","displayedDeckIndex","setDisplayedDeckIndex","modalOpen","setModalOpen","scrapeError","setScrapeError","generateMarkupLine","result","deck","archetype","pilot","duplicatePilot","url","muUrl","muPilot","replace","highlights","maindeck","filter","c","highlighted","sideboard","map","name","muHighlights","Array","from","Set","join","length","mu","muString","push","generateCardCounts","cardCounts","forEach","r","card","countRow","find","count","decks","sort","a","b","console","log","scrape","scrapedResults","error","toggleCardHighlight","cards","sideboardCards","setNextDeck","index","setPreviousDeck","handleSetArchetype","e","data","value","handleKeyPress","key","target","marginLeft","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, ChangeEvent } from 'react';\nimport \"semantic-ui-css/semantic.min.css\"\nimport { Header, Container, Grid, Input, Button, TextArea, Form, Divider, List, Modal, GridColumn, Message } from 'semantic-ui-react'\nimport './App.css';\nimport { getDecksFromUrl } from './scraper'\nimport { Result, Card, Deck } from './types'\nimport DeckList from './DeckList'\n\nconst App: React.FC = () => {\n  const [hasScraped, setHasScraped] = useState<boolean>(false)\n  const [wotcUrl, setWotcUrl] = useState<string>(\"\");\n  const [results, setResults] = useState<Result[]>([]);\n  const [markup, setMarkup] = useState<string[]>([]);\n  const [displayedDeck, setDisplayedDeck] = useState<Result>();\n  const [displayedDeckIndex, setDisplayedDeckIndex] = useState<number>();\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const [scrapeError, setScrapeError] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (results && !hasScraped) {\n      setDisplayedDeck(results[0])\n      setDisplayedDeckIndex(0)\n    }\n  }, [results, hasScraped]);\n\n  const generateMarkupLine = (result: Result): string => {\n    const { deck, archetype, pilot, duplicatePilot, url } = result\n\n    const muUrl = `[${archetype || 'archetype'}](${url})`\n    const muPilot = `**${pilot.replace(/[_]/g, \"\\\\_\")}${\n      duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}**`\n\n    const highlights = [...deck.maindeck.filter(c => c.highlighted), ...deck.sideboard.filter(c => c.highlighted)].map(c => c.name)\n    const muHighlights = `(${Array.from(new Set(highlights)).join(\", \")})`\n    return `* ${muUrl}: ${muPilot} ${highlights.length ? muHighlights : \"\"}`\n  }\n\n  useEffect(() => {\n    const mu: string[] = [];\n    for (const result of results) {\n      const muString = generateMarkupLine(result)\n      mu.push(muString)\n    }\n    setMarkup(mu);\n  }, [results]);\n\n  const generateCardCounts = (results: Result[]) => {\n    const cardCounts: { card: Card, decks: number }[] = []\n    results.forEach(r => {\n      r.deck.maindeck.forEach(card => {\n        const countRow = cardCounts.find(c => c.card.name === card.name);\n        if (!countRow) {\n          cardCounts.push({\n            card: { name: card.name, count: card.count, highlighted: false },\n            decks: 1\n          })\n        }\n        else {\n          countRow.card.count += card.count;\n          countRow.decks++;\n        }\n      })\n\n      r.deck.sideboard.forEach(card => {\n        const countRow = cardCounts.find(c => c.card.name === card.name);\n        if (!countRow) {\n          cardCounts.push({\n            card: { name: card.name, count: card.count, highlighted: false },\n            decks: 1\n          })\n        }\n        else {\n          countRow.card.count += card.count;\n          if (!r.deck.maindeck.find(c => c.name === card.name)) {\n            countRow.decks++;\n          }\n        }\n      })\n    })\n\n    cardCounts.sort((a, b) => b.card.count - a.card.count)\n    console.log(cardCounts)\n  }\n\n\n  const scrape = async () => {\n    try {\n      const scrapedResults = await getDecksFromUrl(wotcUrl);\n      generateCardCounts(scrapedResults);\n      setResults(scrapedResults);\n      setHasScraped(true);\n    } catch (error) {\n      setScrapeError(true)\n    }\n  }\n\n  const toggleCardHighlight = (card: Card) => {\n    const { deck } = displayedDeck!\n    console.log(card)\n    for (const c of deck.maindeck) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted\n      }\n    }\n    for (const c of deck.sideboard) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted\n      }\n    }\n    setDisplayedDeck({ ...displayedDeck!, deck })\n  }\n\n  const cards = displayedDeck && displayedDeck.deck.maindeck.map((card: Card) => {\n    return (\n      <List.Item key={card.name} onClick={() => toggleCardHighlight(card)} className={card.highlighted ? 'highlight' : ''}>\n        {card.count} {card.name}\n      </List.Item>\n    )\n  })\n\n  const sideboardCards = displayedDeck && displayedDeck.deck.sideboard.map((card: Card) => {\n    return (\n      <List.Item key={card.name} onClick={() => toggleCardHighlight(card)} className={card.highlighted ? 'highlight' : ''}>\n        {card.count} {card.name}\n      </List.Item>\n    )\n  })\n\n  const setNextDeck = () => {\n    if (!displayedDeck) {\n      return\n    }\n    const index = displayedDeckIndex!\n    const mu = markup\n    mu[index] = generateMarkupLine(displayedDeck)\n    setMarkup(mu)\n    if (index + 2 < results.length) {\n      setDisplayedDeck(results[index + 1])\n      setDisplayedDeckIndex(index + 1);\n    }\n    else {\n      setModalOpen(false);\n    }\n  }\n\n  const setPreviousDeck = () => {\n    if (!displayedDeck) {\n      return\n    }\n    const index = displayedDeckIndex!\n    const mu = markup\n    mu[index] = generateMarkupLine(displayedDeck)\n    setMarkup(mu)\n    if (index !== 0) {\n      console.log(results[index - 1])\n      setDisplayedDeck(results[index - 1])\n      setDisplayedDeckIndex(index - 1);\n    }\n    else {\n      setModalOpen(false);\n    }\n  }\n\n  const handleSetArchetype = (e: ChangeEvent, data: any) => {\n    const { value } = data\n    const deck: Result = { ...displayedDeck!, archetype: value as string }\n    setDisplayedDeck(deck)\n  }\n\n\n  const handleKeyPress = (e: any, data: any) => {\n    if (e.key === 'Enter') {\n      setNextDeck();\n    }\n  }\n\n  return (\n    <Container className=\"App\">\n      <Header>Scraper</Header>\n      <Grid columns={16}>\n        <Grid.Row>\n          <Grid.Column width={3} textAlign=\"left\">\n            <Input value={wotcUrl} onChange={(e) => setWotcUrl(e.target.value)} placeholder=\"Deck Dump URL\" />\n            <a\n              href='https://magic.wizards.com/en/content/deck-lists-magic-online-products-game-info'\n              target='_blank'\n              style={{ marginLeft: '1em' }}>\n              MTGO Results\n            </a>\n          </Grid.Column>\n          <Grid.Column width={2} textAlign=\"left\">\n            <Button onClick={scrape} content=\"Scrape\" />\n          </Grid.Column>\n          <Grid.Column width={2} textAlign=\"left\">\n            <Button onClick={() => (setModalOpen(true))} content=\"Start\" />\n          </Grid.Column>\n        </Grid.Row>\n\n        <Grid.Row>\n          <Grid.Column width={16}>\n            {scrapeError &&\n              <Message negative>\n                <p>There was an error while attempting to scrape results. Please try again later</p>\n              </Message>\n            }\n            <Form>\n              <Form.TextArea value={markup?.join(\"\\r\\n\")} style={{ height: 500 }} />\n            </Form>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n      <Modal\n        open={modalOpen && !!displayedDeck}\n        centered={false}\n        onClose={() => setModalOpen(false)}\n        closeOnDimmerClick={false}\n        closeIcon>\n        <Modal.Content>\n          {displayedDeck &&\n            <Grid width={16} >\n              <Grid.Row>\n                <Grid.Column width={12}>\n                  <Input label=\"Archetype\" value={displayedDeck.archetype} onChange={handleSetArchetype} onKeyPress={handleKeyPress} />\n                </Grid.Column>\n                <Grid.Column width={2}>\n                  <Button onClick={setPreviousDeck} content=\"Previous\" />\n                </Grid.Column>\n                <Grid.Column width={2}>\n                  <Button onClick={setNextDeck} content=\"Next\" />\n                </Grid.Column>\n              </Grid.Row>\n\n              <Grid.Row>\n                <Grid.Column width={4}>\n                  <List>\n                    {cards}\n                  </List>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                  <List>\n                    {sideboardCards}\n                  </List>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          }\n        </Modal.Content>\n      </Modal>\n    </Container>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}