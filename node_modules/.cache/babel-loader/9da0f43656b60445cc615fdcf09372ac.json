{"ast":null,"code":"var _jsxFileName = \"C:\\\\Git\\\\guided-scraper\\\\src\\\\App.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Header, Container, Grid, Input, Button, Form, Modal, Message, Progress, Tab } from 'semantic-ui-react';\nimport './App.css';\nimport { getDecksFromUrl } from './scraper';\nimport DeckList from './DeckList';\n\nconst App = () => {\n  const [hasScraped, setHasScraped] = useState(false);\n  const [wotcUrl, setWotcUrl] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [markup, setMarkup] = useState([]);\n  const [cardCounts, setCardCounts] = useState([]);\n  const [displayedDeck, setDisplayedDeck] = useState();\n  const [displayedDeckIndex, setDisplayedDeckIndex] = useState();\n  const [modalOpen, setModalOpen] = useState(false);\n  const [scrapeError, setScrapeError] = useState(false);\n  useEffect(() => {\n    if (results && !hasScraped) {\n      setDisplayedDeck(results[0]);\n      setDisplayedDeckIndex(0);\n    }\n  }, [results, hasScraped]);\n\n  const generateMarkupLine = result => {\n    const {\n      deck,\n      archetype,\n      pilot,\n      duplicatePilot,\n      url\n    } = result;\n    const muUrl = `[${archetype || 'archetype'}](${url})`;\n    const muPilot = `**${pilot.replace(/[_]/g, \"\\\\_\")}${duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}**`;\n    const highlights = [...deck.maindeck.filter(c => c.highlighted), ...deck.sideboard.filter(c => c.highlighted)].map(c => c.name);\n    const muHighlights = `(${Array.from(new Set(highlights)).join(\", \")})`;\n    return `* ${muUrl}: ${muPilot} ${highlights.length ? muHighlights : \"\"}`;\n  };\n\n  const generateMarkup = results => {\n    const mu = [];\n\n    for (const result of results) {\n      const muString = generateMarkupLine(result);\n      mu.push(muString);\n    }\n\n    setMarkup(mu);\n  };\n\n  const generateCardCounts = results => {\n    const counts = [];\n    results.forEach(r => {\n      r.deck.maindeck.forEach(card => {\n        const countRow = counts.find(c => c.card.name === card.name);\n\n        if (!countRow) {\n          counts.push({\n            card: {\n              name: card.name,\n              count: card.count,\n              highlighted: false\n            },\n            deckCount: 1\n          });\n        } else {\n          countRow.card.count += card.count;\n          countRow.deckCount++;\n        }\n      });\n      r.deck.sideboard.forEach(card => {\n        const countRow = counts.find(c => c.card.name === card.name);\n\n        if (!countRow) {\n          counts.push({\n            card: {\n              name: card.name,\n              count: card.count,\n              highlighted: false\n            },\n            deckCount: 1\n          });\n        } else {\n          countRow.card.count += card.count;\n\n          if (!r.deck.maindeck.find(c => c.name === card.name)) {\n            countRow.deckCount++;\n          }\n        }\n      });\n    });\n    counts.sort((a, b) => b.card.count - a.card.count);\n    setCardCounts(counts.map(c => `${c.card.count} cop${c.card.count > 1 ? 'ies' : 'y'} of ${c.card.name} in ${c.deckCount} deck${c.deckCount > 1 ? 's' : ''}`));\n  };\n\n  const scrape = async () => {\n    try {\n      const scrapedResults = await getDecksFromUrl(wotcUrl);\n      generateMarkup(scrapedResults);\n      generateCardCounts(scrapedResults);\n      setResults(scrapedResults);\n      setHasScraped(true);\n    } catch (error) {\n      setScrapeError(true);\n    }\n  };\n\n  const goToNextDeck = () => {\n    if (!displayedDeck) {\n      return;\n    }\n\n    const index = displayedDeckIndex;\n    const res = [...results];\n    res[index] = displayedDeck;\n    setResults(res);\n    const mu = markup;\n    mu[index] = generateMarkupLine(displayedDeck);\n    setMarkup(mu);\n\n    if (index + 2 < results.length) {\n      console.log(results[index]);\n      setDisplayedDeck(results[index + 1]);\n      setDisplayedDeckIndex(index + 1);\n    } else {\n      setModalOpen(false);\n    }\n  };\n\n  const goToPreviousDeck = () => {\n    if (!displayedDeck) {\n      return;\n    }\n\n    const index = displayedDeckIndex;\n    const res = [...results];\n    res[index] = displayedDeck;\n    setResults(res);\n    const mu = [...markup];\n    mu[index] = generateMarkupLine(displayedDeck);\n    setMarkup(mu);\n\n    if (index !== 0) {\n      console.log(results[index - 1]);\n      setDisplayedDeck(results[index - 1]);\n      setDisplayedDeckIndex(index - 1);\n    } else {\n      setModalOpen(false);\n    }\n  };\n\n  const panes = [{\n    menuItem: 'Markdown',\n    pane: React.createElement(Tab.Pane, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(Form.TextArea, {\n      value: markup === null || markup === void 0 ? void 0 : markup.join(\"\\r\\n\"),\n      style: {\n        height: 500\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    })))\n  }, {\n    menuItem: 'Card Counts',\n    pane: React.createElement(Tab.Pane, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Form.TextArea, {\n      value: cardCounts === null || cardCounts === void 0 ? void 0 : cardCounts.join(\"\\r\\n\"),\n      style: {\n        height: 500\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    })))\n  }];\n  return React.createElement(Container, {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, \"Scraper\"), React.createElement(Grid, {\n    columns: 16,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 3,\n    textAlign: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(Input, {\n    value: wotcUrl,\n    onChange: e => setWotcUrl(e.target.value),\n    placeholder: \"Deck Dump URL\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }), React.createElement(\"a\", {\n    href: \"https://magic.wizards.com/en/content/deck-lists-magic-online-products-game-info\",\n    target: \"_blank\",\n    style: {\n      marginLeft: '1em'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, \"MTGO Results\")), React.createElement(Grid.Column, {\n    width: 2,\n    textAlign: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: scrape,\n    content: \"Scrape\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  })), React.createElement(Grid.Column, {\n    width: 2,\n    textAlign: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => setModalOpen(true),\n    content: \"Walkthrough\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }))), React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 16,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, scrapeError && React.createElement(Message, {\n    negative: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, \"There was an error while attempting to scrape results. Please try again later\")), React.createElement(Tab, {\n    panes: panes,\n    renderActiveOnly: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  })))), React.createElement(Modal, {\n    open: modalOpen && !!displayedDeck,\n    centered: false,\n    onClose: () => setModalOpen(false),\n    closeOnDimmerClick: false,\n    closeIcon: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, React.createElement(Modal.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, displayedDeck && React.createElement(DeckList, {\n    result: displayedDeck,\n    goToNextDeck: goToNextDeck,\n    goToPreviousDeck: goToPreviousDeck,\n    setDisplayedDeck: setDisplayedDeck,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }), React.createElement(Progress, {\n    value: displayedDeckIndex,\n    total: results.length,\n    progress: \"ratio\",\n    style: {\n      marginTop: '1em',\n      marginBottom: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }))));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Git/guided-scraper/src/App.tsx"],"names":["React","useState","useEffect","Header","Container","Grid","Input","Button","Form","Modal","Message","Progress","Tab","getDecksFromUrl","DeckList","App","hasScraped","setHasScraped","wotcUrl","setWotcUrl","results","setResults","markup","setMarkup","cardCounts","setCardCounts","displayedDeck","setDisplayedDeck","displayedDeckIndex","setDisplayedDeckIndex","modalOpen","setModalOpen","scrapeError","setScrapeError","generateMarkupLine","result","deck","archetype","pilot","duplicatePilot","url","muUrl","muPilot","replace","highlights","maindeck","filter","c","highlighted","sideboard","map","name","muHighlights","Array","from","Set","join","length","generateMarkup","mu","muString","push","generateCardCounts","counts","forEach","r","card","countRow","find","count","deckCount","sort","a","b","scrape","scrapedResults","error","goToNextDeck","index","res","console","log","goToPreviousDeck","panes","menuItem","pane","height","e","target","value","marginLeft","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport \"semantic-ui-css/semantic.min.css\"\nimport { Header, Container, Grid, Input, Button, Form, Modal, Message, Progress, Tab } from 'semantic-ui-react'\nimport './App.css';\nimport { getDecksFromUrl } from './scraper'\nimport { Result, Card } from './types'\nimport DeckList from './DeckList'\n\nconst App: React.FC = () => {\n  const [hasScraped, setHasScraped] = useState<boolean>(false)\n  const [wotcUrl, setWotcUrl] = useState<string>(\"\");\n  const [results, setResults] = useState<Result[]>([]);\n  const [markup, setMarkup] = useState<string[]>([]);\n  const [cardCounts, setCardCounts] = useState<string[]>([]);\n  const [displayedDeck, setDisplayedDeck] = useState<Result>();\n  const [displayedDeckIndex, setDisplayedDeckIndex] = useState<number>();\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const [scrapeError, setScrapeError] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (results && !hasScraped) {\n      setDisplayedDeck(results[0])\n      setDisplayedDeckIndex(0)\n    }\n  }, [results, hasScraped]);\n\n  const generateMarkupLine = (result: Result): string => {\n    const { deck, archetype, pilot, duplicatePilot, url } = result\n\n    const muUrl = `[${archetype || 'archetype'}](${url})`\n    const muPilot = `**${pilot.replace(/[_]/g, \"\\\\_\")}${\n      duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}**`\n\n    const highlights = [...deck.maindeck.filter(c => c.highlighted), ...deck.sideboard.filter(c => c.highlighted)].map(c => c.name)\n    const muHighlights = `(${Array.from(new Set(highlights)).join(\", \")})`\n    return `* ${muUrl}: ${muPilot} ${highlights.length ? muHighlights : \"\"}`\n  }\n\n  const generateMarkup = (results: Result[]) => {\n    const mu: string[] = [];\n    for (const result of results) {\n      const muString = generateMarkupLine(result)\n      mu.push(muString)\n    }\n    setMarkup(mu);\n  }\n\n  const generateCardCounts = (results: Result[]) => {\n    const counts: { card: Card, deckCount: number }[] = []\n    results.forEach(r => {\n      r.deck.maindeck.forEach(card => {\n        const countRow = counts.find(c => c.card.name === card.name);\n        if (!countRow) {\n          counts.push({\n            card: { name: card.name, count: card.count, highlighted: false },\n            deckCount: 1\n          })\n        }\n        else {\n          countRow.card.count += card.count;\n          countRow.deckCount++;\n        }\n      })\n\n      r.deck.sideboard.forEach(card => {\n        const countRow = counts.find(c => c.card.name === card.name);\n        if (!countRow) {\n          counts.push({\n            card: { name: card.name, count: card.count, highlighted: false },\n            deckCount: 1\n          })\n        }\n        else {\n          countRow.card.count += card.count;\n          if (!r.deck.maindeck.find(c => c.name === card.name)) {\n            countRow.deckCount++;\n          }\n        }\n      })\n    })\n\n    counts.sort((a, b) => b.card.count - a.card.count)\n    setCardCounts(counts.map(c => `${c.card.count} cop${c.card.count > 1 ? 'ies' : 'y'} of ${c.card.name} in ${c.deckCount} deck${c.deckCount > 1 ? 's' : ''}`))\n  }\n\n\n  const scrape = async () => {\n    try {\n      const scrapedResults = await getDecksFromUrl(wotcUrl);\n      generateMarkup(scrapedResults);\n      generateCardCounts(scrapedResults);\n      setResults(scrapedResults);\n      setHasScraped(true);\n    } catch (error) {\n      setScrapeError(true)\n    }\n  }\n\n  const goToNextDeck = () => {\n    if (!displayedDeck) {\n      return\n    }\n    const index = displayedDeckIndex!\n\n    const res = [...results]\n    res[index] = displayedDeck;\n    setResults(res);\n\n    const mu = markup\n    mu[index] = generateMarkupLine(displayedDeck)\n    setMarkup(mu)\n    if (index + 2 < results.length) {\n      console.log(results[index])\n      setDisplayedDeck(results[index + 1])\n      setDisplayedDeckIndex(index + 1);\n    }\n    else {\n      setModalOpen(false);\n    }\n  }\n\n  const goToPreviousDeck = () => {\n    if (!displayedDeck) {\n      return\n    }\n    const index = displayedDeckIndex!\n\n    const res = [...results]\n    res[index] = displayedDeck;\n    setResults(res);\n\n    const mu = [...markup]\n    mu[index] = generateMarkupLine(displayedDeck)\n    setMarkup(mu)\n\n    if (index !== 0) {\n      console.log(results[index - 1])\n      setDisplayedDeck(results[index - 1])\n      setDisplayedDeckIndex(index - 1);\n    }\n    else {\n      setModalOpen(false);\n    }\n  }\n\n  const panes = [\n    {\n      menuItem: 'Markdown', pane:\n        <Tab.Pane>\n          <Form>\n            <Form.TextArea value={markup?.join(\"\\r\\n\")} style={{ height: 500 }} />\n          </Form>\n        </Tab.Pane>\n    },\n    {\n      menuItem: 'Card Counts', pane:\n        <Tab.Pane>\n          <Form>\n            <Form.TextArea value={cardCounts?.join(\"\\r\\n\")} style={{ height: 500 }} />\n          </Form>\n        </Tab.Pane>\n    }\n  ]\n\n  return (\n    <Container className=\"App\">\n      <Header>Scraper</Header>\n      <Grid columns={16}>\n        <Grid.Row>\n          <Grid.Column width={3} textAlign=\"left\">\n            <Input value={wotcUrl} onChange={(e) => setWotcUrl(e.target.value)} placeholder=\"Deck Dump URL\" />\n            <a\n              href='https://magic.wizards.com/en/content/deck-lists-magic-online-products-game-info'\n              target='_blank'\n              style={{ marginLeft: '1em' }}>\n              MTGO Results\n            </a>\n          </Grid.Column>\n          <Grid.Column width={2} textAlign=\"left\">\n            <Button onClick={scrape} content=\"Scrape\" />\n          </Grid.Column>\n          <Grid.Column width={2} textAlign=\"left\">\n            <Button onClick={() => (setModalOpen(true))} content=\"Walkthrough\" />\n          </Grid.Column>\n        </Grid.Row>\n\n        <Grid.Row>\n          <Grid.Column width={16}>\n            {scrapeError &&\n              <Message negative>\n                <p>There was an error while attempting to scrape results. Please try again later</p>\n              </Message>\n            }\n            <Tab panes={panes} renderActiveOnly={false} />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n      <Modal\n        open={modalOpen && !!displayedDeck}\n        centered={false}\n        onClose={() => setModalOpen(false)}\n        closeOnDimmerClick={false}\n        closeIcon>\n        <Modal.Content>\n          {displayedDeck &&\n            <DeckList result={displayedDeck} goToNextDeck={goToNextDeck} goToPreviousDeck={goToPreviousDeck} setDisplayedDeck={setDisplayedDeck} />\n          }\n          <Progress value={displayedDeckIndex} total={results.length} progress='ratio' style={{ marginTop: '1em', marginBottom: 0 }} />\n        </Modal.Content>\n      </Modal>\n    </Container>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}