{"ast":null,"code":"var _jsxFileName = \"C:\\\\Git\\\\guided-scraper\\\\src\\\\App.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Header, Container, Grid, Input, Button, Form, List } from 'semantic-ui-react';\nimport './App.css';\nimport { getDecksFromUrl } from './scraper';\n\nconst App = () => {\n  const [hasScraped, setHasScraped] = useState(false);\n  const [wotcUrl, setWotcUrl] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [markup, setMarkup] = useState(\"\");\n  const [displayedDeck, setDisplayedDeck] = useState();\n  const [displayedDeckIndex, setDisplayedDeckIndex] = useState();\n  useEffect(() => {\n    if (results && !hasScraped) {\n      setDisplayedDeck(results[0]);\n      setDisplayedDeckIndex(0);\n    }\n  }, [results, hasScraped]);\n  useEffect(() => {\n    console.log('making markup');\n    const mu = [];\n\n    for (const result of results) {\n      mu.push(wotcUrl.includes('events/coverage') ? `* [${result.pilot.replace(/[_]/g, \"\\\\_\").split(' - ')[1]}](${result.url}): **${result.pilot.replace(/[_]/g, \"\\\\_\").split(' - ')[0]}${result.duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}**` : `* [${result.archetype || 'archetype'}](${result.url}): **${result.pilot.replace(/[_]/g, \"\\\\_\")}${result.duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}**`);\n    }\n\n    setMarkup(mu.join(\"\\r\\n\"));\n  }, [results, wotcUrl]);\n\n  const scrape = async () => {\n    const scrapedResults = await getDecksFromUrl(wotcUrl);\n    setResults(scrapedResults);\n    setHasScraped(true);\n  };\n\n  const toggleCardHighlight = card => {\n    const {\n      deck\n    } = displayedDeck;\n    console.log(card);\n\n    for (const c of deck.maindeck) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted;\n      }\n    }\n\n    for (const c of deck.sideboard) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted;\n      }\n    }\n\n    setDisplayedDeck({ ...displayedDeck,\n      deck\n    });\n  };\n\n  const cards = displayedDeck && displayedDeck.deck.maindeck.map(card => {\n    return React.createElement(List.Item, {\n      key: card.name,\n      onClick: () => toggleCardHighlight(card),\n      className: card.highlighted ? 'highlight' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, card.count, \" \", card.name);\n  });\n\n  const setNextDeck = () => {\n    const tempResults = results;\n    tempResults[displayedDeckIndex] = displayedDeck;\n    setResults(tempResults);\n    setDisplayedDeck(results[displayedDeckIndex + 1]);\n    setDisplayedDeckIndex(displayedDeckIndex + 1);\n  };\n\n  const handleSetArchtype = (e, data) => {\n    const {\n      value\n    } = data;\n    const deck = { ...displayedDeck,\n      archetype: value\n    };\n    setDisplayedDeck(deck);\n  };\n\n  return React.createElement(Container, {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Scraper\"), React.createElement(Grid, {\n    columns: 2,\n    divided: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Input, {\n    value: wotcUrl,\n    onChange: e => setWotcUrl(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: scrape,\n    content: \"Scrape\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), React.createElement(\"a\", {\n    href: \"https://magic.wizards.com/en/content/deck-lists-magic-online-products-game-info\",\n    target: \"_blank\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"MTGO Results\")), React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, displayedDeck && React.createElement(Container, {\n    className: \"Deck\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Input, {\n    label: \"archtype\",\n    value: displayedDeck.archetype,\n    onChange: handleSetArchtype,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: setNextDeck,\n    content: \"Next\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, cards))), React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(Form.TextArea, {\n    value: markup,\n    style: {\n      width: 900\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  })))));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Git/guided-scraper/src/App.tsx"],"names":["React","useState","useEffect","Header","Container","Grid","Input","Button","Form","List","getDecksFromUrl","App","hasScraped","setHasScraped","wotcUrl","setWotcUrl","results","setResults","markup","setMarkup","displayedDeck","setDisplayedDeck","displayedDeckIndex","setDisplayedDeckIndex","console","log","mu","result","push","includes","pilot","replace","split","url","duplicatePilot","archetype","join","scrape","scrapedResults","toggleCardHighlight","card","deck","c","maindeck","name","highlighted","sideboard","cards","map","count","setNextDeck","tempResults","handleSetArchtype","e","data","value","target","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, ChangeEvent } from 'react';\nimport \"semantic-ui-css/semantic.min.css\"\nimport { Header, Container, Grid, Input, Button, TextArea, Form, Divider, List, Modal } from 'semantic-ui-react'\nimport './App.css';\nimport { getDecksFromUrl } from './scraper'\nimport { Result, Card, Deck } from './types'\nimport DeckList from './DeckList'\n\nconst App: React.FC = () => {\n  const [hasScraped, setHasScraped] = useState<boolean>(false)\n  const [wotcUrl, setWotcUrl] = useState<string>(\"\");\n  const [results, setResults] = useState<Result[]>([]);\n  const [markup, setMarkup] = useState<string>(\"\");\n  const [displayedDeck, setDisplayedDeck] = useState<Result>();\n  const [displayedDeckIndex, setDisplayedDeckIndex] = useState<number>();\n\n  useEffect(() => {\n    if (results && !hasScraped) {\n      setDisplayedDeck(results[0])\n      setDisplayedDeckIndex(0)\n    }\n  }, [results, hasScraped]);\n\n\n  useEffect(() => {\n    console.log('making markup')\n    const mu: string[] = [];\n    for (const result of results) {\n      mu.push(wotcUrl.includes('events/coverage') ? `* [${result.pilot.replace(/[_]/g, \"\\\\_\").split(' - ')[1]}](${result.url}): **${result.pilot.replace(/[_]/g, \"\\\\_\").split(' - ')[0]}${\n        result.duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"\n        }**` :\n        `* [${result.archetype || 'archetype'}](${result.url}): **${result.pilot.replace(/[_]/g, \"\\\\_\")}${\n        result.duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"\n        }**`)\n    }\n    setMarkup(mu.join(\"\\r\\n\"));\n  }, [results, wotcUrl]);\n\n\n  const scrape = async () => {\n    const scrapedResults = await getDecksFromUrl(wotcUrl);\n    setResults(scrapedResults);\n    setHasScraped(true);\n  }\n  const toggleCardHighlight = (card: Card) => {\n    const { deck } = displayedDeck!\n    console.log(card)\n    for (const c of deck.maindeck) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted\n      }\n    }\n    for (const c of deck.sideboard) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted\n      }\n    }\n    setDisplayedDeck({ ...displayedDeck!, deck })\n  }\n\n  const cards = displayedDeck && displayedDeck.deck.maindeck.map((card: Card) => {\n    return (\n      <List.Item key={card.name} onClick={() => toggleCardHighlight(card)} className={card.highlighted ? 'highlight' : ''}>\n        {card.count} {card.name}\n      </List.Item>\n    )\n  })\n\n  const setNextDeck = () => {\n    const tempResults = results\n    tempResults[displayedDeckIndex!] = displayedDeck!\n    setResults(tempResults)\n    setDisplayedDeck(results[displayedDeckIndex! + 1])\n    setDisplayedDeckIndex(displayedDeckIndex! + 1);\n  }\n\n  const handleSetArchtype = (e: ChangeEvent, data: any) => {\n    const { value } = data\n    const deck: Result = { ...displayedDeck!, archetype: value as string }\n    setDisplayedDeck(deck)\n  }\n\n  return (\n    <Container className=\"App\">\n      <Header>Scraper</Header>\n      <Grid columns={2} divided >\n        <Grid.Row>\n          <Input value={wotcUrl} onChange={(e) => setWotcUrl(e.target.value)}></Input>\n          <Button onClick={scrape} content=\"Scrape\" />\n          <a\n            href='https://magic.wizards.com/en/content/deck-lists-magic-online-products-game-info'\n            target='_blank'>\n            MTGO Results\n          </a>\n        </Grid.Row>\n\n        <Grid.Row>\n          {displayedDeck &&\n            <Container className=\"Deck\">\n              <Input label=\"archtype\" value={displayedDeck.archetype} onChange={handleSetArchtype} />\n              <Button onClick={setNextDeck} content=\"Next\" />\n              <List>\n                {cards}\n              </List>\n            </Container>}\n        </Grid.Row>\n\n        <Grid.Row>\n          <Form>\n            <Form.TextArea value={markup} style={{ width: 900 }}></Form.TextArea>\n          </Form>\n        </Grid.Row>\n      </Grid>\n      {/* <Modal open={modalOpen}></Modal> */}\n    </Container>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}