{"ast":null,"code":"import rp from \"request-promise\";\nimport * as cheerio from \"cheerio\";\nconst regex = /[^A-Za-z _-]/g;\nconst cardNameRegex = /[^A-Za-z /]/g;\nconst spaces = / /g;\nexport const getDecksFromUrl = wotcUrl => {\n  const results = [];\n\n  if (wotcUrl.startsWith(\"https://magic.wizards.com\")) {\n    const options = {\n      uri: `https://cors-anywhere.herokuapp.com/${wotcUrl}`,\n      headers: {\n        'Origin': 'https://feremiyjeenyus.github.io/mtgo-results-scraper/'\n      },\n      transform: function (body) {\n        return cheerio.load(body);\n      }\n    };\n    rp(options).then($ => {\n      $(\".deck-group\").each(function () {\n        const headerContent = $(this).find(\"h4\").text();\n        const username = headerContent.split(\" (\")[0];\n        const parts = headerContent.split(\" (\");\n        const name = parts[0];\n        let chaff = \"\";\n\n        if (parts[1]) {\n          chaff = parts[1].replace(regex, \"\").replace(spaces, \"_\").toLowerCase();\n        }\n\n        const url = `${wotcUrl}#${name.replace(regex, \"\").replace(spaces, \"_\").toLowerCase()}${chaff ? \"_\" + chaff : \"\"}`;\n        const deck = {\n          maindeck: [],\n          sideboard: []\n        };\n        $().find(\".sorted-by-overview-container\").find(\".row\").each(function () {\n          deck.maindeck.push({\n            name: $(this).find(\".card-name\").text().toUpperCase().trim().replace(cardNameRegex, \"\"),\n            count: parseInt($(this).find(\".card-count\").text(), 10)\n          });\n        });\n        $().find(\".sorted-by-sideboard-container\").find(\".row\").each(function () {\n          deck.sideboard.push({\n            name: $(this).find(\".card-name\").text().toUpperCase().trim().replace(cardNameRegex, \"\"),\n            count: parseInt($(this).find(\".card-count\").text(), 10)\n          });\n        });\n        results.push({\n          pilot: username,\n          url: url,\n          deck: deck\n        });\n        console.log(results);\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  return results;\n};","map":{"version":3,"sources":["C:/Git/guided-scraper/src/scraper.ts"],"names":["rp","cheerio","regex","cardNameRegex","spaces","getDecksFromUrl","wotcUrl","results","startsWith","options","uri","headers","transform","body","load","then","$","each","headerContent","find","text","username","split","parts","name","chaff","replace","toLowerCase","url","deck","maindeck","sideboard","push","toUpperCase","trim","count","parseInt","pilot","console","log","catch","err"],"mappings":"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","sourcesContent":["import rp from \"request-promise\";\r\nimport * as cheerio from \"cheerio\";\r\nimport { Deck, Result } from './types'\r\n\r\nconst regex = /[^A-Za-z _-]/g;\r\nconst cardNameRegex = /[^A-Za-z /]/g;\r\nconst spaces = / /g;\r\n\r\nexport const getDecksFromUrl = (wotcUrl: string): Result[] => {\r\n    const results: Result[] = [];\r\n    if (wotcUrl.startsWith(\"https://magic.wizards.com\")) {\r\n        const options = {\r\n            uri: `https://cors-anywhere.herokuapp.com/${wotcUrl}`,\r\n            headers: { 'Origin': 'https://feremiyjeenyus.github.io/mtgo-results-scraper/' },\r\n            transform: function (body: string) {\r\n                return cheerio.load(body);\r\n            }\r\n        };\r\n\r\n        rp(options)\r\n            .then($ => {\r\n                $(\".deck-group\").each(function (this: string) {\r\n                    const headerContent = $(this)\r\n                        .find(\"h4\")\r\n                        .text();\r\n                    const username = headerContent.split(\" (\")[0];\r\n                    const parts = headerContent.split(\" (\");\r\n                    const name = parts[0];\r\n                    let chaff = \"\";\r\n                    if (parts[1]) {\r\n                        chaff = parts[1]\r\n                            .replace(regex, \"\")\r\n                            .replace(spaces, \"_\")\r\n                            .toLowerCase();\r\n                    }\r\n                    const url = `${wotcUrl}#${name\r\n                        .replace(regex, \"\")\r\n                        .replace(spaces, \"_\")\r\n                        .toLowerCase()}${chaff ? \"_\" + chaff : \"\"}`;\r\n\r\n                    const deck: Deck = {\r\n                        maindeck: [],\r\n                        sideboard: []\r\n                    };\r\n                    $().find(\".sorted-by-overview-container\").find(\".row\").each(function (this: string) {\r\n                        deck.maindeck.push(\r\n                            {\r\n                                name: $(this).find(\".card-name\").text().toUpperCase().trim().replace(cardNameRegex, \"\"),\r\n                                count: parseInt($(this).find(\".card-count\").text(), 10)\r\n                            }\r\n                        )\r\n                    })\r\n\r\n                    $().find(\".sorted-by-sideboard-container\").find(\".row\").each(function (this: string) {\r\n                        deck.sideboard.push({\r\n                            name: $(this).find(\".card-name\").text().toUpperCase().trim().replace(cardNameRegex, \"\"),\r\n                            count: parseInt($(this).find(\".card-count\").text(), 10)\r\n                        })\r\n                    })\r\n\r\n                    results.push({\r\n                        pilot: username,\r\n                        url: url,\r\n                        deck: deck\r\n                    });\r\n                    console.log(results);\r\n                });\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    return results\r\n};\r\n"]},"metadata":{},"sourceType":"module"}