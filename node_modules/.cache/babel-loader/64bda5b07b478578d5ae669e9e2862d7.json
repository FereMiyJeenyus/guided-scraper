{"ast":null,"code":"var _jsxFileName = \"C:\\\\Git\\\\guided-scraper\\\\src\\\\App.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Header, Container, Grid, Input, Button, Form, List, Modal } from 'semantic-ui-react';\nimport './App.css';\nimport { getDecksFromUrl } from './scraper';\n\nconst App = () => {\n  const [hasScraped, setHasScraped] = useState(false);\n  const [wotcUrl, setWotcUrl] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [markup, setMarkup] = useState([]);\n  const [displayedDeck, setDisplayedDeck] = useState();\n  const [displayedDeckIndex, setDisplayedDeckIndex] = useState();\n  const [modalOpen, setModalOpen] = useState(false);\n  useEffect(() => {\n    if (results && !hasScraped) {\n      setDisplayedDeck(results[0]);\n      setDisplayedDeckIndex(0);\n    }\n  }, [results, hasScraped]);\n\n  const generateMarkupLine = result => {\n    const {\n      deck,\n      archetype,\n      pilot,\n      duplicatePilot,\n      url\n    } = result;\n    const muUrl = `[${archetype || 'archetype'}](${url})`;\n    const muPilot = `**${pilot.replace(/[_]/g, \"\\\\_\")}${duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}**`;\n    const highlights = [...deck.maindeck.filter(c => c.highlighted), ...deck.sideboard.filter(c => c.highlighted)].map(c => c.name);\n    const muHighlights = `(${Array.from(new Set(highlights)).join(\", \")})`;\n    return `* ${muUrl}: ${muPilot} ${highlights.length ? muHighlights : \"\"}`;\n  };\n\n  useEffect(() => {\n    const mu = [];\n\n    for (const result of results) {\n      const muString = generateMarkupLine(result);\n      mu.push(muString);\n    }\n\n    setMarkup(mu);\n  }, [results]);\n\n  const generateCardCounts = results => {\n    const blah = [];\n    results.forEach(r => {\n      const cards = [...r.deck.maindeck, ...r.deck.sideboard];\n      cards.forEach(card => {\n        if (!blah.filter(c => c.name === card.name).length) {\n          blah.push({\n            name: card.name,\n            count: card.count,\n            highlighted: false\n          });\n        } else {\n          blah.find(c => c.name === card.name).count += card.count;\n        }\n      });\n    });\n    blah.sort((a, b) => {\n      return b.count - a.count;\n    });\n    console.log(blah);\n  };\n\n  const scrape = async () => {\n    const scrapedResults = await getDecksFromUrl(wotcUrl);\n    generateCardCounts(scrapedResults);\n    setResults(scrapedResults);\n    setHasScraped(true);\n  };\n\n  const toggleCardHighlight = card => {\n    const {\n      deck\n    } = displayedDeck;\n    console.log(card);\n\n    for (const c of deck.maindeck) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted;\n      }\n    }\n\n    for (const c of deck.sideboard) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted;\n      }\n    }\n\n    setDisplayedDeck({ ...displayedDeck,\n      deck\n    });\n  };\n\n  const cards = displayedDeck && displayedDeck.deck.maindeck.map(card => {\n    return React.createElement(List.Item, {\n      key: card.name,\n      onClick: () => toggleCardHighlight(card),\n      className: card.highlighted ? 'highlight' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, card.count, \" \", card.name);\n  });\n\n  const setNextDeck = () => {\n    if (!displayedDeck) {\n      return;\n    }\n\n    const index = displayedDeckIndex;\n    const mu = markup;\n    mu[index] = generateMarkupLine(displayedDeck);\n    setMarkup(mu);\n\n    if (index + 2 < results.length) {\n      setDisplayedDeck(results[index + 1]);\n      setDisplayedDeckIndex(index + 1);\n    } else {\n      setModalOpen(false);\n    }\n  };\n\n  const handleSetArchetype = (e, data) => {\n    const {\n      value\n    } = data;\n    const deck = { ...displayedDeck,\n      archetype: value\n    };\n    setDisplayedDeck(deck);\n  };\n\n  return React.createElement(Container, {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Scraper\"), React.createElement(Grid, {\n    columns: 16,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    centered: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(Input, {\n    value: wotcUrl,\n    onChange: e => setWotcUrl(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  })), React.createElement(Grid.Column, {\n    width: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: scrape,\n    content: \"Scrape\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  })), React.createElement(Grid.Column, {\n    width: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: () => setModalOpen(true),\n    content: \"Start\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  })), React.createElement(Grid.Column, {\n    width: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"https://magic.wizards.com/en/content/deck-lists-magic-online-products-game-info\",\n    target: \"_blank\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, \"MTGO Results\"))), React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 16,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(Form.TextArea, {\n    value: markup === null || markup === void 0 ? void 0 : markup.join(\"\\r\\n\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }))))), React.createElement(Modal, {\n    open: modalOpen && !!displayedDeck,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, displayedDeck && React.createElement(Container, {\n    className: \"Deck\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(Input, {\n    label: \"archtype\",\n    value: displayedDeck.archetype,\n    onChange: handleSetArchetype,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: setNextDeck,\n    content: \"Next\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }), React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, cards))));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Git/guided-scraper/src/App.tsx"],"names":["React","useState","useEffect","Header","Container","Grid","Input","Button","Form","List","Modal","getDecksFromUrl","App","hasScraped","setHasScraped","wotcUrl","setWotcUrl","results","setResults","markup","setMarkup","displayedDeck","setDisplayedDeck","displayedDeckIndex","setDisplayedDeckIndex","modalOpen","setModalOpen","generateMarkupLine","result","deck","archetype","pilot","duplicatePilot","url","muUrl","muPilot","replace","highlights","maindeck","filter","c","highlighted","sideboard","map","name","muHighlights","Array","from","Set","join","length","mu","muString","push","generateCardCounts","blah","forEach","r","cards","card","count","find","sort","a","b","console","log","scrape","scrapedResults","toggleCardHighlight","setNextDeck","index","handleSetArchetype","e","data","value","target"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, ChangeEvent } from 'react';\nimport \"semantic-ui-css/semantic.min.css\"\nimport { Header, Container, Grid, Input, Button, TextArea, Form, Divider, List, Modal, GridColumn } from 'semantic-ui-react'\nimport './App.css';\nimport { getDecksFromUrl } from './scraper'\nimport { Result, Card, Deck } from './types'\nimport DeckList from './DeckList'\n\nconst App: React.FC = () => {\n  const [hasScraped, setHasScraped] = useState<boolean>(false)\n  const [wotcUrl, setWotcUrl] = useState<string>(\"\");\n  const [results, setResults] = useState<Result[]>([]);\n  const [markup, setMarkup] = useState<string[]>([]);\n  const [displayedDeck, setDisplayedDeck] = useState<Result>();\n  const [displayedDeckIndex, setDisplayedDeckIndex] = useState<number>();\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (results && !hasScraped) {\n      setDisplayedDeck(results[0])\n      setDisplayedDeckIndex(0)\n    }\n  }, [results, hasScraped]);\n\n  const generateMarkupLine = (result: Result): string => {\n    const { deck, archetype, pilot, duplicatePilot, url } = result\n\n    const muUrl = `[${archetype || 'archetype'}](${url})`\n    const muPilot = `**${pilot.replace(/[_]/g, \"\\\\_\")}${\n      duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}**`\n\n    const highlights = [...deck.maindeck.filter(c => c.highlighted), ...deck.sideboard.filter(c => c.highlighted)].map(c => c.name)\n    const muHighlights = `(${Array.from(new Set(highlights)).join(\", \")})`\n    return `* ${muUrl}: ${muPilot} ${highlights.length ? muHighlights : \"\"}`\n  }\n\n  useEffect(() => {\n    const mu: string[] = [];\n    for (const result of results) {\n      const muString = generateMarkupLine(result)\n      mu.push(muString)\n    }\n    setMarkup(mu);\n  }, [results]);\n\n  const generateCardCounts = (results: Result[]) => {\n    const blah: Card[] = []\n    results.forEach(r => {\n      const cards = [...r.deck.maindeck, ...r.deck.sideboard]\n      cards.forEach(card => {\n        if (!blah.filter(c => c.name === card.name).length) {\n          blah.push({ name: card.name, count: card.count, highlighted: false })\n        }\n        else {\n          blah.find(c => c.name === card.name)!.count += card.count;\n        }\n      })\n    })\n    blah.sort((a, b) => { return b.count - a.count })\n    console.log(blah)\n  }\n\n\n  const scrape = async () => {\n    const scrapedResults = await getDecksFromUrl(wotcUrl);\n    generateCardCounts(scrapedResults);\n    setResults(scrapedResults);\n    setHasScraped(true);\n  }\n\n  const toggleCardHighlight = (card: Card) => {\n    const { deck } = displayedDeck!\n    console.log(card)\n    for (const c of deck.maindeck) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted\n      }\n    }\n    for (const c of deck.sideboard) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted\n      }\n    }\n    setDisplayedDeck({ ...displayedDeck!, deck })\n  }\n\n  const cards = displayedDeck && displayedDeck.deck.maindeck.map((card: Card) => {\n    return (\n      <List.Item key={card.name} onClick={() => toggleCardHighlight(card)} className={card.highlighted ? 'highlight' : ''}>\n        {card.count} {card.name}\n      </List.Item>\n    )\n  })\n\n  const setNextDeck = () => {\n    if (!displayedDeck) {\n      return\n    }\n    const index = displayedDeckIndex!\n    const mu = markup\n    mu[index] = generateMarkupLine(displayedDeck)\n    setMarkup(mu)\n    if (index + 2 < results.length) {\n      setDisplayedDeck(results[index + 1])\n      setDisplayedDeckIndex(index + 1);\n    }\n    else {\n      setModalOpen(false);\n    }\n  }\n\n  const handleSetArchetype = (e: ChangeEvent, data: any) => {\n    const { value } = data\n    const deck: Result = { ...displayedDeck!, archetype: value as string }\n    setDisplayedDeck(deck)\n  }\n\n  return (\n    <Container className=\"App\">\n      <Header>Scraper</Header>\n      <Grid columns={16}>\n        <Grid.Row centered>\n          <Grid.Column width={3}>\n            <Input value={wotcUrl} onChange={(e) => setWotcUrl(e.target.value)}></Input>\n          </Grid.Column>\n          <Grid.Column width={2}>\n            <Button onClick={scrape} content=\"Scrape\" />\n          </Grid.Column>\n          <Grid.Column width={2}>\n            <Button onClick={() => (setModalOpen(true))} content=\"Start\" />\n          </Grid.Column>\n          <Grid.Column width={2}>\n            <a\n              href='https://magic.wizards.com/en/content/deck-lists-magic-online-products-game-info'\n              target='_blank'>\n              MTGO Results\n          </a>\n          </Grid.Column>\n        </Grid.Row>\n\n        <Grid.Row>\n          <Grid.Column width={16}>\n            <Form>\n              <Form.TextArea value={markup?.join(\"\\r\\n\")} />\n            </Form>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n      <Modal open={modalOpen && !!displayedDeck}>\n        {displayedDeck &&\n          <Container className=\"Deck\">\n            <Input label=\"archtype\" value={displayedDeck.archetype} onChange={handleSetArchetype} />\n            <Button onClick={setNextDeck} content=\"Next\" />\n            <List>\n              {cards}\n            </List>\n          </Container>}\n      </Modal>\n    </Container>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}