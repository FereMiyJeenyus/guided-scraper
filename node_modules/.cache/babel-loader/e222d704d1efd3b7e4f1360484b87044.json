{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Git\\\\guided-scraper\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Git\\\\guided-scraper\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import rp from\"request-promise\";import*as cheerio from\"cheerio\";var regex=/[^A-Za-z _-]/g;var spaces=/ /g;export var getDecksFromUrl=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(wotcUrl){var results,options;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:results=[];if(!wotcUrl.startsWith(\"https://magic.wizards.com\")){_context.next=5;break;}options={uri:\"https://cors-anywhere.herokuapp.com/\".concat(wotcUrl),headers:{'Origin':'https://feremiyjeenyus.github.io/mtgo-results-scraper/'},transform:function transform(body){return cheerio.load(body);}};_context.next=5;return rp(options).then(function($){var usernames=[];$(\".deck-group\").each(function(){var headerContent=$(this).find(\"h4\").text();var username=headerContent.split(\" (\")[0];var duplicatePilot=usernames.includes(username);usernames.push(username);var parts=headerContent.split(\" (\");var name=parts[0];var chaff=\"\";if(parts[1]){chaff=parts[1].replace(regex,\"\").replace(spaces,\"_\").toLowerCase();}var url=\"\".concat(wotcUrl,\"#\").concat(name.replace(regex,\"\").replace(spaces,\"_\").toLowerCase()).concat(chaff?\"_\"+chaff:\"\");var deck={maindeck:[],sideboard:[]};$(this).find(\".sorted-by-overview-container\").find(\".row\").each(function(){deck.maindeck.push({name:$(this).find(\".card-name\").text().trim(),count:parseInt($(this).find(\".card-count\").text(),10),highlighted:false});});$(this).find(\".sorted-by-sideboard-container\").find(\".row\").each(function(){deck.sideboard.push({name:$(this).find(\".card-name\").text().trim(),count:parseInt($(this).find(\".card-count\").text(),10),highlighted:false});});results.push({pilot:username,url:url,deck:deck,duplicatePilot:duplicatePilot,archetype:\"\"});});}).catch(function(err){console.log(err);throw err;});case 5:return _context.abrupt(\"return\",results);case 6:case\"end\":return _context.stop();}}},_callee);}));return function getDecksFromUrl(_x){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Git/guided-scraper/src/scraper.ts"],"names":["rp","cheerio","regex","spaces","getDecksFromUrl","wotcUrl","results","startsWith","options","uri","headers","transform","body","load","then","$","usernames","each","headerContent","find","text","username","split","duplicatePilot","includes","push","parts","name","chaff","replace","toLowerCase","url","deck","maindeck","sideboard","trim","count","parseInt","highlighted","pilot","archetype","catch","err","console","log"],"mappings":"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","sourcesContent":["import rp from \"request-promise\";\r\nimport * as cheerio from \"cheerio\";\r\nimport { Deck, Result } from './types'\r\n\r\nconst regex = /[^A-Za-z _-]/g;\r\nconst spaces = / /g;\r\n\r\nexport const getDecksFromUrl = async (wotcUrl: string): Promise<Result[]> => {\r\n    const results: Result[] = [];\r\n    if (wotcUrl.startsWith(\"https://magic.wizards.com\")) {\r\n        const options = {\r\n            uri: `https://cors-anywhere.herokuapp.com/${wotcUrl}`,\r\n            headers: { 'Origin': 'https://feremiyjeenyus.github.io/mtgo-results-scraper/' },\r\n            transform: function (body: string) {\r\n                return cheerio.load(body);\r\n            }\r\n        };\r\n        await rp(options)\r\n            .then($ => {\r\n                const usernames: string[] = [];\r\n                $(\".deck-group\").each(function (this: string) {\r\n                    const headerContent = $(this)\r\n                        .find(\"h4\")\r\n                        .text();\r\n                    const username = headerContent.split(\" (\")[0];\r\n                    const duplicatePilot = usernames.includes(username)\r\n                    usernames.push(username);\r\n                    const parts = headerContent.split(\" (\");\r\n                    const name = parts[0];\r\n                    let chaff = \"\";\r\n                    if (parts[1]) {\r\n                        chaff = parts[1]\r\n                            .replace(regex, \"\")\r\n                            .replace(spaces, \"_\")\r\n                            .toLowerCase();\r\n                    }\r\n                    const url = `${wotcUrl}#${name\r\n                        .replace(regex, \"\")\r\n                        .replace(spaces, \"_\")\r\n                        .toLowerCase()}${chaff ? \"_\" + chaff : \"\"}`;\r\n\r\n                    const deck: Deck = {\r\n                        maindeck: [],\r\n                        sideboard: []\r\n                    };\r\n                    $(this).find(\".sorted-by-overview-container\").find(\".row\").each(function (this: string) {\r\n                        deck.maindeck.push(\r\n                            {\r\n                                name: $(this).find(\".card-name\").text().trim(),\r\n                                count: parseInt($(this).find(\".card-count\").text(), 10),\r\n                                highlighted: false\r\n                            }\r\n                        )\r\n                    })\r\n\r\n                    $(this).find(\".sorted-by-sideboard-container\").find(\".row\").each(function (this: string) {\r\n                        deck.sideboard.push({\r\n                            name: $(this).find(\".card-name\").text().trim(),\r\n                            count: parseInt($(this).find(\".card-count\").text(), 10),\r\n                            highlighted: false\r\n                        })\r\n                    })\r\n\r\n                    results.push({\r\n                        pilot: username,\r\n                        url: url,\r\n                        deck: deck,\r\n                        duplicatePilot,\r\n                        archetype: \"\"\r\n                    });\r\n                });\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw (err)\r\n            });\r\n    }\r\n    return results\r\n};\r\n"]},"metadata":{},"sourceType":"module"}