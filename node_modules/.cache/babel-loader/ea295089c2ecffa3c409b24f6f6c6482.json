{"ast":null,"code":"import _objectSpread from\"C:\\\\Git\\\\guided-scraper\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import React from'react';import\"semantic-ui-css/semantic.min.css\";import{Grid,Input,Button,List}from'semantic-ui-react';import'./App.css';import{Result}from'./types';var DeckList=function DeckList(props){var result=props.result,goToNextDeck=props.goToNextDeck,goToPreviousDeck=props.goToPreviousDeck,setDisplayedDeck=props.setDisplayedDeck;var toggleCardHighlight=function toggleCardHighlight(card){var deck=result.deck;var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=deck.maindeck[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var c=_step.value;if(c.name===card.name){c.highlighted=!c.highlighted;}}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return!=null){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=deck.sideboard[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){var _c=_step2.value;if(_c.name===card.name){_c.highlighted=!_c.highlighted;}}}catch(err){_didIteratorError2=true;_iteratorError2=err;}finally{try{if(!_iteratorNormalCompletion2&&_iterator2.return!=null){_iterator2.return();}}finally{if(_didIteratorError2){throw _iteratorError2;}}}setDisplayedDeck(_objectSpread({},result,{deck:deck}));};var cards=result&&result.deck.maindeck.map(function(card){return React.createElement(List.Item,{key:card.name,onClick:function onClick(){return toggleCardHighlight(card);},className:card.highlighted?'highlight':''},card.count,\" \",card.name);});var sideboardCards=result&&result.deck.sideboard.map(function(card){return React.createElement(List.Item,{key:card.name,onClick:function onClick(){return toggleCardHighlight(card);},className:card.highlighted?'highlight':''},card.count,\" \",card.name);});var handleSetArchetype=function handleSetArchetype(e,data){var value=data.value;setDisplayedDeck(_objectSpread({},result,{archetype:value}));};var handleKeyPress=function handleKeyPress(e,data){if(e.key==='Enter'){goToNextDeck();}};return React.createElement(Grid,{width:16},React.createElement(Grid.Row,null,React.createElement(Grid.Column,{width:12},React.createElement(Input,{label:\"Archetype\",value:result.archetype,onChange:handleSetArchetype,onKeyPress:handleKeyPress})),React.createElement(Grid.Column,{width:2},React.createElement(Button,{onClick:goToPreviousDeck,content:\"Previous\"})),React.createElement(Grid.Column,{width:2},React.createElement(Button,{onClick:goToNextDeck,content:\"Next\"}))),React.createElement(Grid.Row,null,React.createElement(Grid.Column,{width:4},React.createElement(List,null,cards)),React.createElement(Grid.Column,{width:4},React.createElement(List,null,sideboardCards))));};export default DeckList;","map":{"version":3,"sources":["C:/Git/guided-scraper/src/DeckList.tsx"],"names":["React","Grid","Input","Button","List","Result","DeckList","props","result","goToNextDeck","goToPreviousDeck","setDisplayedDeck","toggleCardHighlight","card","deck","maindeck","c","name","highlighted","sideboard","cards","map","count","sideboardCards","handleSetArchetype","e","data","value","archetype","handleKeyPress","key"],"mappings":"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","sourcesContent":["import React, { ChangeEvent } from 'react';\r\nimport \"semantic-ui-css/semantic.min.css\"\r\nimport { Grid, Input, Button, List } from 'semantic-ui-react'\r\nimport './App.css';\r\nimport { Result, Card } from './types'\r\n\r\ninterface DeckListProps {\r\n    result: Result;\r\n    goToNextDeck();\r\n    goToPreviousDeck();\r\n    setDisplayedDeck(Result: Result);\r\n}\r\n\r\nconst DeckList: React.FC<DeckListProps> = (props: DeckListProps) => {\r\n    const { result, goToNextDeck, goToPreviousDeck, setDisplayedDeck } = props\r\n\r\n    const toggleCardHighlight = (card: Card) => {\r\n        const { deck } = result\r\n        for (const c of deck.maindeck) {\r\n            if (c.name === card.name) {\r\n                c.highlighted = !c.highlighted\r\n            }\r\n        }\r\n        for (const c of deck.sideboard) {\r\n            if (c.name === card.name) {\r\n                c.highlighted = !c.highlighted\r\n            }\r\n        }\r\n        setDisplayedDeck({ ...result, deck })\r\n    }\r\n\r\n    const cards = result && result.deck.maindeck.map((card: Card) => {\r\n        return (\r\n            <List.Item key={card.name} onClick={() => toggleCardHighlight(card)} className={card.highlighted ? 'highlight' : ''}>\r\n                {card.count} {card.name}\r\n            </List.Item>\r\n        )\r\n    })\r\n\r\n    const sideboardCards = result && result.deck.sideboard.map((card: Card) => {\r\n        return (\r\n            <List.Item key={card.name} onClick={() => toggleCardHighlight(card)} className={card.highlighted ? 'highlight' : ''}>\r\n                {card.count} {card.name}\r\n            </List.Item>\r\n        )\r\n    })\r\n\r\n    const handleSetArchetype = (e: ChangeEvent, data: any) => {\r\n        const { value } = data\r\n        setDisplayedDeck({ ...result, archetype: value })\r\n    }\r\n\r\n    const handleKeyPress = (e: any, data: any) => {\r\n        if (e.key === 'Enter') {\r\n            goToNextDeck();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid width={16} >\r\n            <Grid.Row>\r\n                <Grid.Column width={12}>\r\n                    <Input label=\"Archetype\" value={result.archetype} onChange={handleSetArchetype} onKeyPress={handleKeyPress} />\r\n                </Grid.Column>\r\n                <Grid.Column width={2}>\r\n                    <Button onClick={goToPreviousDeck} content=\"Previous\" />\r\n                </Grid.Column>\r\n                <Grid.Column width={2}>\r\n                    <Button onClick={goToNextDeck} content=\"Next\" />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n\r\n            <Grid.Row>\r\n                <Grid.Column width={4}>\r\n                    <List>\r\n                        {cards}\r\n                    </List>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <List>\r\n                        {sideboardCards}\r\n                    </List>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default DeckList;\r\n"]},"metadata":{},"sourceType":"module"}