{"ast":null,"code":"var _jsxFileName = \"C:\\\\Git\\\\guided-scraper\\\\src\\\\App.tsx\";\nimport React, { useState } from 'react';\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Header, Container, Grid, Input, Button } from 'semantic-ui-react';\nimport './App.css';\nimport { getDecksFromUrl } from './scraper';\n\nconst App = () => {\n  const [hasScraped, setHasScraped] = useState(false);\n  const [wotcUrl, setWotcUrl] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [markup, setMarkup] = useState(\"\");\n\n  const scrape = () => {\n    const scrapedResults = getDecksFromUrl(wotcUrl);\n    const usernames = scrapedResults.map(r => r.pilot);\n    const mu = scrapedResults.map(result => {\n      const link = wotcUrl.includes('events/coverage') ? `* [${result.pilot.replace(/[_]/g, \"\\\\_\").split(' - ')[1]}](${result.url}): **${result.pilot.replace(/[_]/g, \"\\\\_\").split(' - ')[0]}${usernames.includes(result.pilot) ? \" (duplicate pilot, link points to other list)\" : \"\"}**` : `* [archetype](${result.url}): **${result.pilot.replace(/[_]/g, \"\\\\_\")}${usernames.includes(result.pilot) ? \" (duplicate pilot, link points to other list)\" : \"\"}**`;\n      usernames.push(result.pilot);\n      return link;\n    });\n    setResults(scrapedResults);\n    setMarkup(mu.join(\"\\r\\n\"));\n  };\n\n  return React.createElement(Container, {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Scraper\"), React.createElement(Grid, {\n    columns: 2,\n    divided: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(Input, {\n    value: wotcUrl,\n    onChange: e => setWotcUrl(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: scrape,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, markup)));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Git/guided-scraper/src/App.tsx"],"names":["React","useState","Header","Container","Grid","Input","Button","getDecksFromUrl","App","hasScraped","setHasScraped","wotcUrl","setWotcUrl","results","setResults","markup","setMarkup","scrape","scrapedResults","usernames","map","r","pilot","mu","result","link","includes","replace","split","url","push","join","e","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,kCAAP;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,IAA5B,EAAkCC,KAAlC,EAAyCC,MAAzC,QAAiE,mBAAjE;AACA,OAAO,WAAP;AACA,SAASC,eAAT,QAAgC,WAAhC;;AAEA,MAAMC,GAAa,GAAG,MAAM;AAC1B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAU,KAAV,CAA5C;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAS,EAAT,CAAtC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAW,EAAX,CAAtC;AACA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAS,EAAT,CAApC;;AAEA,QAAMgB,MAAM,GAAG,MAAM;AACnB,UAAMC,cAAc,GAAGX,eAAe,CAACI,OAAD,CAAtC;AACA,UAAMQ,SAAS,GAAGD,cAAc,CAACE,GAAf,CAAmBC,CAAC,IAAIA,CAAC,CAACC,KAA1B,CAAlB;AACA,UAAMC,EAAE,GAAGL,cAAc,CAACE,GAAf,CAAmBI,MAAM,IAAI;AACtC,YAAMC,IAAI,GAAGd,OAAO,CAACe,QAAR,CAAiB,iBAAjB,IAAuC,MAAKF,MAAM,CAACF,KAAP,CAAaK,OAAb,CAAqB,MAArB,EAA6B,KAA7B,EAAoCC,KAApC,CAA0C,KAA1C,EAAiD,CAAjD,CAAoD,KAAIJ,MAAM,CAACK,GAAI,QAAOL,MAAM,CAACF,KAAP,CAAaK,OAAb,CAAqB,MAArB,EAA6B,KAA7B,EAAoCC,KAApC,CAA0C,KAA1C,EAAiD,CAAjD,CAAoD,GACrLT,SAAS,CAACO,QAAV,CAAmBF,MAAM,CAACF,KAA1B,IAAmC,+CAAnC,GAAqF,EACpF,IAFU,GAGV,iBAAgBE,MAAM,CAACK,GAAI,QAAOL,MAAM,CAACF,KAAP,CAAaK,OAAb,CAAqB,MAArB,EAA6B,KAA7B,CAAoC,GACvER,SAAS,CAACO,QAAV,CAAmBF,MAAM,CAACF,KAA1B,IAAmC,+CAAnC,GAAqF,EACpF,IALH;AAMAH,MAAAA,SAAS,CAACW,IAAV,CAAeN,MAAM,CAACF,KAAtB;AACA,aAAOG,IAAP;AACD,KATU,CAAX;AAUAX,IAAAA,UAAU,CAACI,cAAD,CAAV;AACAF,IAAAA,SAAS,CAACO,EAAE,CAACQ,IAAH,CAAQ,MAAR,CAAD,CAAT;AACD,GAfD;;AAiBA,SACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE,oBAAC,IAAD;AAAM,IAAA,OAAO,EAAE,CAAf;AAAkB,IAAA,OAAO,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEpB,OAAd;AAAuB,IAAA,QAAQ,EAAGqB,CAAD,IAAOpB,UAAU,CAACoB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEjB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYF,MAAZ,CAHF,CAFF,CADF;AAUD,CAjCD;;AAmCA,eAAeP,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport \"semantic-ui-css/semantic.min.css\"\nimport { Header, Container, Grid, Input, Button, TextArea } from 'semantic-ui-react'\nimport './App.css';\nimport { getDecksFromUrl } from './scraper'\n\nconst App: React.FC = () => {\n  const [hasScraped, setHasScraped] = useState<boolean>(false)\n  const [wotcUrl, setWotcUrl] = useState<string>(\"\");\n  const [results, setResults] = useState<Result[]>([]);\n  const [markup, setMarkup] = useState<string>(\"\");\n\n  const scrape = () => {\n    const scrapedResults = getDecksFromUrl(wotcUrl);\n    const usernames = scrapedResults.map(r => r.pilot);\n    const mu = scrapedResults.map(result => {\n      const link = wotcUrl.includes('events/coverage') ? `* [${result.pilot.replace(/[_]/g, \"\\\\_\").split(' - ')[1]}](${result.url}): **${result.pilot.replace(/[_]/g, \"\\\\_\").split(' - ')[0]}${\n        usernames.includes(result.pilot) ? \" (duplicate pilot, link points to other list)\" : \"\"\n        }**` :\n        `* [archetype](${result.url}): **${result.pilot.replace(/[_]/g, \"\\\\_\")}${\n        usernames.includes(result.pilot) ? \" (duplicate pilot, link points to other list)\" : \"\"\n        }**`;\n      usernames.push(result.pilot);\n      return link;\n    });\n    setResults(scrapedResults);\n    setMarkup(mu.join(\"\\r\\n\"));\n  }\n\n  return (\n    <Container className=\"App\">\n      <Header>Scraper</Header>\n      <Grid columns={2} divided >\n        <Input value={wotcUrl} onChange={(e) => setWotcUrl(e.target.value)}></Input>\n        <Button onClick={scrape}></Button>\n        <Container>{markup}</Container>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}