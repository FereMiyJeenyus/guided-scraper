{"ast":null,"code":"var _jsxFileName = \"C:\\\\Git\\\\guided-scraper\\\\src\\\\App.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Header, Container, Grid, Input, Button, Form, List } from 'semantic-ui-react';\nimport './App.css';\nimport { getDecksFromUrl } from './scraper';\n\nconst App = () => {\n  const [hasScraped, setHasScraped] = useState(false);\n  const [wotcUrl, setWotcUrl] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [markup, setMarkup] = useState([]);\n  const [displayedDeck, setDisplayedDeck] = useState();\n  const [displayedDeckIndex, setDisplayedDeckIndex] = useState();\n  useEffect(() => {\n    if (results && !hasScraped) {\n      setDisplayedDeck(results[0]);\n      setDisplayedDeckIndex(0);\n    }\n  }, [results, hasScraped]);\n\n  const generateMarkupLine = result => {\n    const {\n      deck,\n      archetype,\n      pilot,\n      duplicatePilot,\n      url\n    } = result;\n    const muUrl = `[${archetype || 'archetype'}](${url})`;\n    const mUpilot = `**${pilot.replace(/[_]/g, \"\\\\_\")}${duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}**`;\n    const cardnames = [...deck.maindeck.filter(c => c.highlighted), ...deck.sideboard.filter(c => c.highlighted)].map(c => c.name);\n    const muHighlights = `(${Array.from(new Set(cardnames))})`;\n    return `* ${muUrl}: ${mUpilot} ${muHighlights}`;\n  };\n\n  useEffect(() => {\n    console.log('making markup');\n    const mu = [];\n\n    for (const result of results) {\n      const muString = generateMarkupLine(result);\n      mu.push(muString);\n    }\n\n    setMarkup(mu);\n  }, [results]);\n\n  const scrape = async () => {\n    const scrapedResults = await getDecksFromUrl(wotcUrl);\n    setResults(scrapedResults);\n    setHasScraped(true);\n  };\n\n  const toggleCardHighlight = card => {\n    const {\n      deck\n    } = displayedDeck;\n    console.log(card);\n\n    for (const c of deck.maindeck) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted;\n      }\n    }\n\n    for (const c of deck.sideboard) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted;\n      }\n    }\n\n    setDisplayedDeck({ ...displayedDeck,\n      deck\n    });\n  };\n\n  const cards = displayedDeck && displayedDeck.deck.maindeck.map(card => {\n    return React.createElement(List.Item, {\n      key: card.name,\n      onClick: () => toggleCardHighlight(card),\n      className: card.highlighted ? 'highlight' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, card.count, \" \", card.name);\n  });\n\n  const setNextDeck = () => {\n    const tempResults = results;\n    tempResults[displayedDeckIndex] = displayedDeck;\n    console.log(tempResults[0]);\n    setResults(tempResults);\n    setDisplayedDeck(results[displayedDeckIndex + 1]);\n    setDisplayedDeckIndex(displayedDeckIndex + 1);\n  };\n\n  const handleSetArchtype = (e, data) => {\n    const {\n      value\n    } = data;\n    const deck = { ...displayedDeck,\n      archetype: value\n    };\n    setDisplayedDeck(deck);\n  };\n\n  return React.createElement(Container, {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Scraper\"), React.createElement(Grid, {\n    columns: 2,\n    divided: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(Input, {\n    value: wotcUrl,\n    onChange: e => setWotcUrl(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: scrape,\n    content: \"Scrape\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(\"a\", {\n    href: \"https://magic.wizards.com/en/content/deck-lists-magic-online-products-game-info\",\n    target: \"_blank\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"MTGO Results\")), React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, displayedDeck && React.createElement(Container, {\n    className: \"Deck\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(Input, {\n    label: \"archtype\",\n    value: displayedDeck.archetype,\n    onChange: handleSetArchtype,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: setNextDeck,\n    content: \"Next\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, cards))), React.createElement(Grid.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(Form.TextArea, {\n    value: markup === null || markup === void 0 ? void 0 : markup.join(\"\\r\\n\"),\n    style: {\n      width: 900\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  })))));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Git/guided-scraper/src/App.tsx"],"names":["React","useState","useEffect","Header","Container","Grid","Input","Button","Form","List","getDecksFromUrl","App","hasScraped","setHasScraped","wotcUrl","setWotcUrl","results","setResults","markup","setMarkup","displayedDeck","setDisplayedDeck","displayedDeckIndex","setDisplayedDeckIndex","generateMarkupLine","result","deck","archetype","pilot","duplicatePilot","url","muUrl","mUpilot","replace","cardnames","maindeck","filter","c","highlighted","sideboard","map","name","muHighlights","Array","from","Set","console","log","mu","muString","push","scrape","scrapedResults","toggleCardHighlight","card","cards","count","setNextDeck","tempResults","handleSetArchtype","e","data","value","target","join","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, ChangeEvent } from 'react';\nimport \"semantic-ui-css/semantic.min.css\"\nimport { Header, Container, Grid, Input, Button, TextArea, Form, Divider, List, Modal } from 'semantic-ui-react'\nimport './App.css';\nimport { getDecksFromUrl } from './scraper'\nimport { Result, Card, Deck } from './types'\nimport DeckList from './DeckList'\n\nconst App: React.FC = () => {\n  const [hasScraped, setHasScraped] = useState<boolean>(false)\n  const [wotcUrl, setWotcUrl] = useState<string>(\"\");\n  const [results, setResults] = useState<Result[]>([]);\n  const [markup, setMarkup] = useState<string[]>([]);\n  const [displayedDeck, setDisplayedDeck] = useState<Result>();\n  const [displayedDeckIndex, setDisplayedDeckIndex] = useState<number>();\n\n  useEffect(() => {\n    if (results && !hasScraped) {\n      setDisplayedDeck(results[0])\n      setDisplayedDeckIndex(0)\n    }\n  }, [results, hasScraped]);\n\n  const generateMarkupLine = (result: Result): string => {\n    const { deck, archetype, pilot, duplicatePilot, url } = result\n\n    const muUrl = `[${archetype || 'archetype'}](${url})`\n    const mUpilot = `**${pilot.replace(/[_]/g, \"\\\\_\")}${\n      duplicatePilot ? \" (duplicate pilot, link points to other list)\" : \"\"}**`\n\n    const cardnames = [...deck.maindeck.filter(c => c.highlighted), ...deck.sideboard.filter(c => c.highlighted)].map(c => c.name)\n    const muHighlights = `(${Array.from(new Set(cardnames))})`\n    return `* ${muUrl}: ${mUpilot} ${muHighlights}`\n  }\n\n  useEffect(() => {\n    console.log('making markup')\n    const mu: string[] = [];\n    for (const result of results) {\n      const muString = generateMarkupLine(result)\n      mu.push(muString)\n    }\n    setMarkup(mu);\n  }, [results]);\n\n\n  const scrape = async () => {\n    const scrapedResults = await getDecksFromUrl(wotcUrl);\n    setResults(scrapedResults);\n    setHasScraped(true);\n  }\n  const toggleCardHighlight = (card: Card) => {\n    const { deck } = displayedDeck!\n    console.log(card)\n    for (const c of deck.maindeck) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted\n      }\n    }\n    for (const c of deck.sideboard) {\n      if (c.name === card.name) {\n        c.highlighted = !c.highlighted\n      }\n    }\n    setDisplayedDeck({ ...displayedDeck!, deck })\n  }\n\n  const cards = displayedDeck && displayedDeck.deck.maindeck.map((card: Card) => {\n    return (\n      <List.Item key={card.name} onClick={() => toggleCardHighlight(card)} className={card.highlighted ? 'highlight' : ''}>\n        {card.count} {card.name}\n      </List.Item>\n    )\n  })\n\n  const setNextDeck = () => {\n    const tempResults = results\n    tempResults[displayedDeckIndex!] = displayedDeck!\n    console.log(tempResults[0])\n    setResults(tempResults)\n    setDisplayedDeck(results[displayedDeckIndex! + 1])\n    setDisplayedDeckIndex(displayedDeckIndex! + 1);\n  }\n\n  const handleSetArchtype = (e: ChangeEvent, data: any) => {\n    const { value } = data\n    const deck: Result = { ...displayedDeck!, archetype: value as string }\n    setDisplayedDeck(deck)\n  }\n\n  return (\n    <Container className=\"App\">\n      <Header>Scraper</Header>\n      <Grid columns={2} divided >\n        <Grid.Row>\n          <Input value={wotcUrl} onChange={(e) => setWotcUrl(e.target.value)}></Input>\n          <Button onClick={scrape} content=\"Scrape\" />\n          <a\n            href='https://magic.wizards.com/en/content/deck-lists-magic-online-products-game-info'\n            target='_blank'>\n            MTGO Results\n          </a>\n        </Grid.Row>\n\n        <Grid.Row>\n          {displayedDeck &&\n            <Container className=\"Deck\">\n              <Input label=\"archtype\" value={displayedDeck.archetype} onChange={handleSetArchtype} />\n              <Button onClick={setNextDeck} content=\"Next\" />\n              <List>\n                {cards}\n              </List>\n            </Container>}\n        </Grid.Row>\n\n        <Grid.Row>\n          <Form>\n            <Form.TextArea value={markup?.join(\"\\r\\n\")} style={{ width: 900 }}></Form.TextArea>\n          </Form>\n        </Grid.Row>\n      </Grid>\n      {/* <Modal open={modalOpen}></Modal> */}\n    </Container>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}